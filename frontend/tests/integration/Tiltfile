load("ext://helm_remote", "helm_remote")
load("ext://secret", "secret_from_dict", "secret_yaml_generic")

PROJECT_ROOT = "../.."


def local_path(*paths):
    return os.path.join(PROJECT_ROOT, *paths)


ALPINE_VERSION = "3.15"
PY_VERSION = "3.10"
CONTAINER_REGISTRY = "ghcr.io"


#                                                      .
#                                                    .o8
#   .oooo.o  .ooooo.   .ooooo.  oooo d8b  .ooooo.  .o888oo  .oooo.o
#  d88(  "8 d88' `88b d88' `"Y8 `888""8P d88' `88b   888   d88(  "8
#  `"Y88b.  888ooo888 888        888     888ooo888   888   `"Y88b.
#  o.  )88b 888    .o 888   .o8  888     888    .o   888 . o.  )88b
#  8""888P' `Y8bod8P' `Y8bod8P' d888b    `Y8bod8P'   "888" 8""888P'


def from_dotenv(path, key):
    return str(local('. "{}" && echo "${}"'.format(path, key))).strip()


local("./scripts/genkeys-if-needed", dir=local_path())

all_secrets = {
    v: from_dotenv(local_path("certs", ".env"), v)
    for v in [
        "EAS_CERTIFICATE",
        "EAS_PRIVATE_KEY",
        "KAS_CERTIFICATE",
        "KAS_EC_SECP256R1_CERTIFICATE",
        "KAS_EC_SECP256R1_PRIVATE_KEY",
        "KAS_PRIVATE_KEY",
    ]
}
all_secrets["POSTGRES_PASSWORD"] = "myPostgresPassword"


def only_secrets_named(*items):
    return {k: all_secrets[k] for k in items}


k8s_yaml(
    secret_from_dict(
        "attributes-secrets", inputs=only_secrets_named("POSTGRES_PASSWORD")
    )
)
k8s_yaml(
    secret_from_dict(
        "claims-secrets",
        inputs=only_secrets_named(
            "POSTGRES_PASSWORD",
            "EAS_CERTIFICATE",
            "EAS_PRIVATE_KEY",
            "KAS_EC_SECP256R1_CERTIFICATE",
            "KAS_CERTIFICATE",
        ),
    )
)
k8s_yaml(
    secret_from_dict(
        "entitlements-secrets",
        inputs={
            "DISABLE_ENTITLEMENTS_AUTH": "True",
            "POSTGRES_PASSWORD": all_secrets["POSTGRES_PASSWORD"],
        },
    )
)
k8s_yaml(
    secret_from_dict(
        "kas-secrets",
        inputs=only_secrets_named(
            "POSTGRES_PASSWORD",
            "EAS_CERTIFICATE",
            "KAS_EC_SECP256R1_CERTIFICATE",
            "KAS_CERTIFICATE",
            "KAS_EC_SECP256R1_PRIVATE_KEY",
            "KAS_PRIVATE_KEY",
        ),
    )
)

#   o8o
#   `"'
#  oooo  ooo. .oo.  .oo.    .oooo.    .oooooooo  .ooooo.   .oooo.o
#  `888  `888P"Y88bP"Y88b  `P  )88b  888' `88b  d88' `88b d88(  "8
#   888   888   888   888   .oP"888  888   888  888ooo888 `"Y88b.
#   888   888   888   888  d8(  888  `88bod8P'  888    .o o.  )88b
#  o888o o888o o888o o888o `Y888""8o `8oooooo.  `Y8bod8P' 8""888P'
#                                    d"     YD
#                                    "Y88888P'
#

docker_build(
    "ghcr.io/opentdf/python-base",
    local_path("containers", "python_base"),
    build_args={
        "ALPINE_VERSION": ALPINE_VERSION,
        "CONTAINER_REGISTRY": CONTAINER_REGISTRY,
        "PY_VERSION": PY_VERSION,
    },
)

docker_build(
    "ghcr.io/opentdf/kas",
    build_args={
        "CONTAINER_REGISTRY": CONTAINER_REGISTRY,
        "PY_VERSION": PY_VERSION,
        "PYTHON_BASE_IMAGE_SELECTOR": "",
    },
    context=local_path("containers", "kas"),
    live_update=[
        sync(local_path("containers", "kas"), "/app"),
        run(
            "cd /app && pip install -r requirements.txt",
            trigger=local_path("containers", "kas", "requirements.txt"),
        ),
    ],
)

for microservice in ["attributes", "entitlements", "claims"]:
    image_name = "ghcr.io/opentdf/" + microservice
    docker_build(
        image_name,
        build_args={
            "ALPINE_VERSION": ALPINE_VERSION,
            "CONTAINER_REGISTRY": CONTAINER_REGISTRY,
            "PY_VERSION": PY_VERSION,
            "PYTHON_BASE_IMAGE_SELECTOR": "",
        },
        container_args=["--reload"],
        context=local_path("containers"),
        dockerfile=local_path("containers", microservice, "Dockerfile"),
        live_update=[
            sync(local_path("containers", "python_base"), "/app/python_base"),
            sync(local_path("containers", microservice), "/app/" + microservice),
            run(
                "cd /app/ && pip install -r requirements.txt",
                trigger=local_path("containers", microservice, "requirements.txt"),
            ),
        ],
    )

docker_build(
    "ghcr.io/opentdf/keycloak",
    local_path("containers", "keycloak-protocol-mapper"),
    build_args={
        "CONTAINER_REGISTRY": "docker.io",
        "MAVEN_VERSION": "3.8.4",
        "JDK_VERSION": "11",
        "KEYCLOAK_BASE_IMAGE": "virtru/keycloak-base", #TODO fix this after going public
        "KEYCLOAK_BASE_VERSION": "15.0.2",
    },
)

#                                           o8o
#                                           `"'
#   .oooo.o  .ooooo.  oooo d8b oooo    ooo oooo   .ooooo.   .ooooo.   .oooo.o
#  d88(  "8 d88' `88b `888""8P  `88.  .8'  `888  d88' `"Y8 d88' `88b d88(  "8
#  `"Y88b.  888ooo888  888       `88..8'    888  888       888ooo888 `"Y88b.
#  o.  )88b 888    .o  888        `888'     888  888   .o8 888    .o o.  )88b
#  8""888P' `Y8bod8P' d888b        `8'     o888o `Y8bod8P' `Y8bod8P' 8""888P'

k8s_yaml(
    helm(
        "../../charts/attributes",
        "opentdf-attributes",
        set=["image.name=" + CONTAINER_REGISTRY + "/opentdf/attributes"],
        values=["backend-attributes-values.yaml"],
    )
)


k8s_yaml("backend.yaml")
k8s_yaml("frontend.yaml")

# resource dependencies
k8s_resource("opentdf-attributes", resource_deps=["opentdf-postgresql"])
k8s_resource("opentdf-claims", resource_deps=["opentdf-postgresql"])
k8s_resource("opentdf-entitlements", resource_deps=["opentdf-postgresql"])
k8s_resource("opentdf-kas", resource_deps=["opentdf-attributes"])


helm_remote(
    "keycloak",
    version="17.0.1",
    repo_url="https://codecentric.github.io/helm-charts",
    values=["backend-keycloak-values.yaml"],
)

helm_remote(
    "postgresql",
    repo_url="https://charts.bitnami.com/bitnami",
    release_name="opentdf",
    version="10.16.2",
    values=["backend-postgresql-values.yaml"],
)

#     o8o
#     `"'
#    oooo  ooo. .oo.    .oooooooo oooo d8b  .ooooo.   .oooo.o  .oooo.o
#    `888  `888P"Y88b  888' `88b  `888""8P d88' `88b d88(  "8 d88(  "8
#     888   888   888  888   888   888     888ooo888 `"Y88b.  `"Y88b.
#     888   888   888  `88bod8P'   888     888    .o o.  )88b o.  )88b
#    o888o o888o o888o `8oooooo.  d888b    `Y8bod8P' 8""888P' 8""888P'
#                      d"     YD
#                      "Y88888P'
#

# TODO should integrate with a service mesh and stop deploying our own ingress
# We need to have big headers for the huge bearer tokens we pass around
# https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/
helm_remote(
    "ingress-nginx",
    repo_url="https://kubernetes.github.io/ingress-nginx",
    set=["controller.config.large-client-header-buffers=20 32k"],
    version="4.0.16",
)

k8s_resource("ingress-nginx-controller", port_forwards="65432:80")


#     .o8                               .                .
#    "888                             .o8              .o8
#     888oooo.   .ooooo.   .ooooo.  .o888oo  .oooo.o .o888oo oooo d8b  .oooo.   oo.ooooo.
#     d88' `88b d88' `88b d88' `88b   888   d88(  "8   888   `888""8P `P  )88b   888' `88b
#     888   888 888   888 888   888   888   `"Y88b.    888    888      .oP"888   888   888
#     888   888 888   888 888   888   888 . o.  )88b   888 .  888     d8(  888   888   888
#     `Y8bod8P' `Y8bod8P' `Y8bod8P'   "888" 8""888P'   "888" d888b    `Y888""8o  888bod8P'
#                                                                                888
#                                                                               o888o
#

docker_build(
    "ghcr.io/opentdf/keycloak-bootstrap",
    local_path("containers", "keycloak-bootstrap"),
    build_args={"ALPINE_VERSION": ALPINE_VERSION, "PY_VERSION": PY_VERSION},
)

k8s_resource("bootstrap-keycloak", resource_deps=["keycloak", "opentdf-entitlements"])

#    db    db d888888b d88888b .d8888. d888888b
#    `8b  d8' `~~88~~' 88'     88'  YP `~~88~~'
#     `8bd8'     88    88ooooo `8bo.      88
#     .dPYb.     88    88~~~~~   `Y8b.    88
#    .8P  Y8.    88    88.     db   8D    88
#    YP    YP    YP    Y88888P `8888Y'    YP

docker_build(
    "ghcr.io/opentdf/tests-clients",
    context=local_path("."),
    dockerfile=local_path("tests", "containers", "clients", "Dockerfile"),
)

k8s_yaml("xtest.yaml")
k8s_resource("opentdf-xtest", resource_deps=["bootstrap-keycloak", "keycloak", "opentdf-kas"])
