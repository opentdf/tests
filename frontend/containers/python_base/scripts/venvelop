#!/usr/bin/env bash
# Run command(s) in the given venv.
#
# Example:
#   venvelop test your_command with arguments
#   venvelop --clean another command with arguments in clean venv

APP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
export PATH="$PATH:$APP_DIR"
monolog TRACE "Updated PATH [${PATH}]"

monolog TRACE "venvelop: [${*}]"

if [[ "--clean" == "$1" ]]; then
  shift
  monolog DEBUG "Cleaning [.venv-$1]"
  rm -rf ".venv-$1"
  if [[ -d ".venv-$1" ]]; then
    monolog WARN "Unable to remove old directory [.venv-$1]"
  fi
fi

venv_name=".venv-$1"

monolog DEBUG "Creating [${venv_name}]"
if ! python3 -m venv "${venv_name}"; then
  monolog INFO "Failed to run python3 -m venv; trying virtualenv"
  if ! virtualenv -p "$(command -v python3)" "${venv_name}"; then
    monolog ERROR "Unable to create virtual env"
    exit 1
  fi
fi
monolog DEBUG "Activating [${venv_name}]"
# shellcheck source=/dev/null
. "${venv_name}/bin/activate" || exit 1

export PATH="$PATH:$APP_DIR"
monolog TRACE "Re-Updated PATH [${PATH}]"

# deactivate on exit
trap "deactivate" EXIT

monolog DEBUG "Upgrading pip [${venv_name}]"
pip3 install --upgrade pip || exit 1

shift
monolog DEBUG "Running wrapped command [$*] within [${venv_name}]"

("$@")

command_rv=$?
monolog DEBUG "Wrapped command [$*] completed within [${venv_name}] with status [${command_rv}]"
exit $command_rv
