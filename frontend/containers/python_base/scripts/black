#!/usr/bin/env bash
# Reformat shell scripts via black with a git hook.
#
# To install hook: black --install
# To run on all files: black --all

APP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
TOOL_NAME="$(basename "$0")"
PROJECT_DIR="$(git rev-parse --show-toplevel)"
export PATH="$PATH:$APP_DIR"

_install_git_hook() {
  mkdir -p .git/hooks
  if [ ! -f .git/hooks/pre-commit ]; then
    cat >.git/hooks/pre-commit <<EOF
#!/usr/bin/env bash

EOF
    chmod +x .git/hooks/pre-commit
  fi
  if grep "$TOOL_NAME" .git/hooks/pre-commit; then
    echo "Hook already present"
  else
    cat >>.git/hooks/pre-commit <<EOF
"$APP_DIR/$TOOL_NAME"
EOF
  fi
}

updo() {
  monolog TRACE "updo [${*}]"
  if git check-ignore -q "$1"; then
    monolog DEBUG "Ignored file [$1]"
    return
  fi
  if ! black - <"$1" >"$1.tmp"; then
    monolog ERROR "Unable to format [$1], err: [$?]"
    exit 1
  fi
  if diff -q "$1.tmp" "$1" >/dev/null; then
    monolog DEBUG "No change in $1"
    if ! rm "$1.tmp"; then
      monolog ERROR "Unable to remove temp file" && exit 1
    fi
  elif [ -s "$1.tmp" ]; then
    monolog DEBUG "Formatted [$1]"
    # Use cat to overwrite contents to maintain ownership & permissions
    if cat "$1.tmp" >"$1" && rm "$1.tmp" && git add "$1"; then
      monolog DEBUG "Added back [$1]"
    else
      monolog ERROR "Unable to copy content"
      exit 1
    fi
  else
    monolog ERROR "Formatted file empty: $1"
    exit 1
  fi
}

updo-these() {
  pip3 install black
  for x in "$@"; do
    updo "$x"
  done
}

export -f updo updo-these

# List all python files staged for commit
_list-changed() {
  # If you want to diff all changed files, before generating a commit, use
  # this line:
  # git diff --name-only \
  git diff --name-only --cached --diff-filter=ACM |
    grep -e '\.py$' -e '^Tiltfile'
}

_list-all() {
  # List all python source files that are probably source files.
  # Checking gitignore is slower than excluding these big directories explicitly.
  find "$1" \
    -type d \( -name .git -o -name node_modules -o -name tilt_modules -o -name .venv\* -o -name build \) -prune -o \
    -type f \( -name '*.py' -o -name '*.pyi' -o -name 'Tiltfile*' \) -print
}

if [[ "$#" == 0 ]]; then
  # Process all changed files in this commit, mostly
  while IFS='' read -r value; do
    to_format+=("$value")
  done < <(_list-changed)
  monolog DEBUG "Found ${#to_format[@]} changed files"
elif [[ "$#" == 1 ]]; then
  case "$1" in
    "--all")
      monolog TRACE "_list-all: [${PROJECT_DIR}]"
      while IFS='' read -r value; do
        to_format+=("$value")
      done < <(_list-all "${PROJECT_DIR}")
      ;;
    "--install")
      monolog TRACE "_install_git_hook"
      _install_git_hook
      ;;
    "--these")
      monolog TRACE "_list-all [$(pwd)]"
      while IFS='' read -r value; do
        to_format+=("$value")
      done < <(_list-all .)
      ;;
    *) monolog ERROR "Unrecognized arg: [$1]" && exit 1 ;;
  esac
else
  monolog ERROR "Please enter zero or one argument"
  exit 1
fi

# Only bother loading the venv if we have files to examine.
if [[ ${#to_format[@]} ]]; then
  monolog DEBUG "len(to_format) = ${#to_format[@]}"
  venvelop black updo-these "${to_format[@]}"
fi
