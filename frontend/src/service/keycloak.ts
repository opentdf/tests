/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ServerInfoRepresentation"];
          };
        };
      };
    };
    post: {
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** JSON representation of the realm */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RealmRepresentation"];
        };
      };
    };
  };
  "/{id}/name": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/{realm}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["RealmRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RealmRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/admin-events": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          authClient?: string;
          authIpAddress?: string;
          authRealm?: string;
          /** user id */
          authUser?: string;
          dateFrom?: string;
          dateTo?: string;
          first?: number;
          /** Maximum results size (defaults to 100) */
          max?: number;
          operationTypes?: string[];
          resourcePath?: string;
          resourceTypes?: string[];
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/attack-detection/brute-force/users": {
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/attack-detection/brute-force/users/{userId}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          userId: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          userId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        userId: string;
      };
    };
  };
  "/{realm}/authentication/authenticator-providers": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/authentication/client-authenticator-providers": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/authentication/config-description/{providerId}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          providerId: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["AuthenticatorConfigInfoRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        providerId: string;
      };
    };
  };
  "/{realm}/authentication/config/{id}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Configuration id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["AuthenticatorConfigRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Configuration id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** JSON describing new state of authenticator configuration */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthenticatorConfigRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Configuration id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Configuration id */
        id: string;
      };
    };
  };
  "/{realm}/authentication/executions": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** JSON model describing authentication execution */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthenticationExecutionRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/authentication/executions/{executionId}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Execution id */
          executionId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Execution id */
          executionId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Execution id */
        executionId: string;
      };
    };
  };
  "/{realm}/authentication/executions/{executionId}/config": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Execution id */
          executionId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** JSON with new configuration */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthenticatorConfigRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Execution id */
        executionId: string;
      };
    };
  };
  "/{realm}/authentication/executions/{executionId}/lower-priority": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Execution id */
          executionId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Execution id */
        executionId: string;
      };
    };
  };
  "/{realm}/authentication/executions/{executionId}/raise-priority": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Execution id */
          executionId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Execution id */
        executionId: string;
      };
    };
  };
  "/{realm}/authentication/flows": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** Authentication flow representation */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthenticationFlowRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/authentication/flows/{flowAlias}/copy": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Name of the existing authentication flow */
          flowAlias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** JSON containing 'newName' attribute */
      requestBody: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Name of the existing authentication flow */
        flowAlias: string;
      };
    };
  };
  "/{realm}/authentication/flows/{flowAlias}/executions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Flow alias */
          flowAlias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Flow alias */
          flowAlias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** AuthenticationExecutionInfoRepresentation */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthenticationExecutionInfoRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Flow alias */
        flowAlias: string;
      };
    };
  };
  "/{realm}/authentication/flows/{flowAlias}/executions/execution": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Alias of parent flow */
          flowAlias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** New execution JSON data containing 'provider' attribute */
      requestBody: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Alias of parent flow */
        flowAlias: string;
      };
    };
  };
  "/{realm}/authentication/flows/{flowAlias}/executions/flow": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Alias of parent authentication flow */
          flowAlias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** New authentication flow / execution JSON data containing 'alias', 'type', 'provider', and 'description' attributes */
      requestBody: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Alias of parent authentication flow */
        flowAlias: string;
      };
    };
  };
  "/{realm}/authentication/flows/{id}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Flow id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["AuthenticationFlowRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Flow id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** Authentication flow representation */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthenticationFlowRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Flow id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Flow id */
        id: string;
      };
    };
  };
  "/{realm}/authentication/form-action-providers": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/authentication/form-providers": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/authentication/per-client-config-description": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/authentication/register-required-action": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** JSON containing 'providerId', and 'name' attributes. */
      requestBody: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/authentication/required-actions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/authentication/required-actions/{alias}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Alias of required action */
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["RequiredActionProviderRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Alias of required action */
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** JSON describing new state of required action */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RequiredActionProviderRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Alias of required action */
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Alias of required action */
        alias: string;
      };
    };
  };
  "/{realm}/authentication/required-actions/{alias}/lower-priority": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Alias of required action */
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Alias of required action */
        alias: string;
      };
    };
  };
  "/{realm}/authentication/required-actions/{alias}/raise-priority": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Alias of required action */
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Alias of required action */
        alias: string;
      };
    };
  };
  "/{realm}/authentication/unregistered-required-actions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/clear-keys-cache": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/clear-realm-cache": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/clear-user-cache": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/client-description-converter": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ClientRepresentation"];
          };
        };
      };
      requestBody: {
        content: {
          "text/plain": string;
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/client-policies/policies": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ClientPoliciesRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientPoliciesRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/client-policies/profiles": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          "include-global-profiles"?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ClientProfilesRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientProfilesRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/client-registration-policy/providers": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/client-scopes": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientScopeRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id1: string;
          id2: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ProtocolMapperRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id1: string;
          id2: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProtocolMapperRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id1: string;
          id2: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id1: string;
        id2: string;
      };
    };
  };
  "/{realm}/client-scopes/{id}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ClientScopeRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientScopeRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client scope (not name) */
        id: string;
      };
    };
  };
  "/{realm}/client-scopes/{id}/protocol-mappers/add-models": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProtocolMapperRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client scope (not name) */
        id: string;
      };
    };
  };
  "/{realm}/client-scopes/{id}/protocol-mappers/models": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProtocolMapperRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client scope (not name) */
        id: string;
      };
    };
  };
  "/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
          protocol: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client scope (not name) */
        id: string;
        protocol: string;
      };
    };
  };
  "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client scope (not name) */
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client scope (not name) */
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
          client: string;
        };
        query: {
          /** if false, return roles with their attributes */
          briefRepresentation?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client scope (not name) */
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/client-scopes/{id}/scope-mappings/realm": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client scope (not name) */
        id: string;
      };
    };
  };
  "/{realm}/client-scopes/{id}/scope-mappings/realm/available": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client scope (not name) */
        id: string;
      };
    };
  };
  "/{realm}/client-scopes/{id}/scope-mappings/realm/composite": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client scope (not name) */
          id: string;
        };
        query: {
          /** if false, return roles with their attributes */
          briefRepresentation?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client scope (not name) */
        id: string;
      };
    };
  };
  "/{realm}/client-session-stats": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/clients": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          /** filter by clientId */
          clientId?: string;
          /** the first result */
          first?: number;
          /** the max results to return */
          max?: number;
          q?: string;
          /** whether this is a search query or a getClientById query */
          search?: boolean;
          /** filter clients that cannot be viewed in full by admin */
          viewableOnly?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/clients-initial-access": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ClientInitialAccessPresentation"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientInitialAccessCreatePresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/clients-initial-access/{id}": {
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/clients/{id1}/protocol-mappers/models/{id2}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id1: string;
          id2: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ProtocolMapperRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id1: string;
          id2: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProtocolMapperRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id1: string;
          id2: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id1: string;
        id2: string;
      };
    };
  };
  "/{realm}/clients/{id}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ClientRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/certificates/{attr}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          attr: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["CertificateRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        attr: string;
      };
    };
  };
  "/{realm}/clients/{id}/certificates/{attr}/download": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          attr: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/octet-stream": string;
          };
        };
      };
      /** Keystore configuration as JSON */
      requestBody: {
        content: {
          "application/json": components["schemas"]["KeyStoreConfig"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        attr: string;
      };
    };
  };
  "/{realm}/clients/{id}/certificates/{attr}/generate": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          attr: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["CertificateRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        attr: string;
      };
    };
  };
  "/{realm}/clients/{id}/certificates/{attr}/generate-and-download": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          attr: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/octet-stream": string;
          };
        };
      };
      /** Keystore configuration as JSON */
      requestBody: {
        content: {
          "application/json": components["schemas"]["KeyStoreConfig"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        attr: string;
      };
    };
  };
  "/{realm}/clients/{id}/certificates/{attr}/upload": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          attr: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["CertificateRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        attr: string;
      };
    };
  };
  "/{realm}/clients/{id}/certificates/{attr}/upload-certificate": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          attr: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["CertificateRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        attr: string;
      };
    };
  };
  "/{realm}/clients/{id}/client-secret": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["CredentialRepresentation"];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["CredentialRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/default-client-scopes": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/default-client-scopes/{clientScopeId}": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          clientScopeId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          clientScopeId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        clientScopeId: string;
      };
    };
  };
  "/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
        query: {
          scope?: string;
          userId?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["AccessToken"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/evaluate-scopes/generate-example-id-token": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
        query: {
          scope?: string;
          userId?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["IDToken"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
        query: {
          scope?: string;
          userId?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/evaluate-scopes/protocol-mappers": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
        query: {
          scope?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** either realm name OR client UUID */
          roleContainerId: string;
        };
        query: {
          scope?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        /** either realm name OR client UUID */
        roleContainerId: string;
      };
    };
  };
  "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** either realm name OR client UUID */
          roleContainerId: string;
        };
        query: {
          scope?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        /** either realm name OR client UUID */
        roleContainerId: string;
      };
    };
  };
  "/{realm}/clients/{id}/installation/providers/{providerId}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          providerId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        providerId: string;
      };
    };
  };
  "/{realm}/clients/{id}/management/permissions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ManagementPermissionReference"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/nodes": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/nodes/{node}": {
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          node: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        node: string;
      };
    };
  };
  "/{realm}/clients/{id}/offline-session-count": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/offline-sessions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
        query: {
          /** Paging offset */
          first?: number;
          /** Maximum results size (defaults to 100) */
          max?: number;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/optional-client-scopes": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          clientScopeId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          clientScopeId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        clientScopeId: string;
      };
    };
  };
  "/{realm}/clients/{id}/protocol-mappers/add-models": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProtocolMapperRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/protocol-mappers/models": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProtocolMapperRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          protocol: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        protocol: string;
      };
    };
  };
  "/{realm}/clients/{id}/push-revocation": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["GlobalRequestResult"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/registration-access-token": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ClientRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/roles": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
        query: {
          briefRepresentation?: boolean;
          first?: number;
          max?: number;
          search?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/roles/{role-name}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["RoleRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        /** role’s name (not id!) */
        "role-name": string;
      };
    };
  };
  "/{realm}/clients/{id}/roles/{role-name}/composites": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** roles to remove */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        /** role’s name (not id!) */
        "role-name": string;
      };
    };
  };
  "/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** role’s name (not id!) */
          "role-name": string;
          clientUuid: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        /** role’s name (not id!) */
        "role-name": string;
        clientUuid: string;
      };
    };
  };
  "/{realm}/clients/{id}/roles/{role-name}/composites/realm": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        /** role’s name (not id!) */
        "role-name": string;
      };
    };
  };
  "/{realm}/clients/{id}/roles/{role-name}/groups": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** the role name. */
          "role-name": string;
        };
        query: {
          /** if false, return a full representation of the {@code GroupRepresentation} objects. */
          briefRepresentation?: boolean;
          /** first result to return. Ignored if negative or {@code null}. */
          first?: number;
          /** maximum number of results to return. Ignored if negative or {@code null}. */
          max?: number;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        /** the role name. */
        "role-name": string;
      };
    };
  };
  "/{realm}/clients/{id}/roles/{role-name}/management/permissions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ManagementPermissionReference"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        "role-name": string;
      };
    };
  };
  "/{realm}/clients/{id}/roles/{role-name}/users": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          /** the role name. */
          "role-name": string;
        };
        query: {
          /** first result to return. Ignored if negative or {@code null}. */
          first?: number;
          /** maximum number of results to return. Ignored if negative or {@code null}. */
          max?: number;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        /** the role name. */
        "role-name": string;
      };
    };
  };
  "/{realm}/clients/{id}/scope-mappings/clients/{client}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/clients/{id}/scope-mappings/clients/{client}/available": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/clients/{id}/scope-mappings/clients/{client}/composite": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
          client: string;
        };
        query: {
          /** if false, return roles with their attributes */
          briefRepresentation?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/clients/{id}/scope-mappings/realm": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/scope-mappings/realm/available": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/scope-mappings/realm/composite": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
        query: {
          /** if false, return roles with their attributes */
          briefRepresentation?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/service-account-user": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["UserRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/session-count": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/test-nodes-available": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["GlobalRequestResult"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/clients/{id}/user-sessions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of client (not client-id) */
          id: string;
        };
        query: {
          /** Paging offset */
          first?: number;
          /** Maximum results size (defaults to 100) */
          max?: number;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of client (not client-id) */
        id: string;
      };
    };
  };
  "/{realm}/components": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          name?: string;
          parent?: string;
          type?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ComponentRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/components/{id}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ComponentRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ComponentRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/components/{id}/sub-component-types": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
        query: {
          type?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/credential-registrators": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/default-default-client-scopes": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/default-default-client-scopes/{clientScopeId}": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          clientScopeId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          clientScopeId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        clientScopeId: string;
      };
    };
  };
  "/{realm}/default-groups": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/default-groups/{groupId}": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          groupId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          groupId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        groupId: string;
      };
    };
  };
  "/{realm}/default-optional-client-scopes": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/default-optional-client-scopes/{clientScopeId}": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          clientScopeId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          clientScopeId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        clientScopeId: string;
      };
    };
  };
  "/{realm}/events": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          /** App or oauth client name */
          client?: string;
          /** From date */
          dateFrom?: string;
          /** To date */
          dateTo?: string;
          /** Paging offset */
          first?: number;
          /** IP address */
          ipAddress?: string;
          /** Maximum results size (defaults to 100) */
          max?: number;
          /** The types of events to return */
          type?: string[];
          /** User id */
          user?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/events/config": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["RealmEventsConfigRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RealmEventsConfigRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/group-by-path/{path}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          path: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["GroupRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        path: string;
      };
    };
  };
  "/{realm}/groups": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          briefRepresentation?: boolean;
          first?: number;
          max?: number;
          search?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["GroupRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/groups/count": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          search?: string;
          top?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/groups/{id}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["GroupRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["GroupRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/groups/{id}/children": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["GroupRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/groups/{id}/management/permissions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ManagementPermissionReference"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/groups/{id}/members": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
        query: {
          /**
           * Only return basic information (only guaranteed to return id, username, created, first and last name,
           *  email, enabled state, email verification state, federation link, and access.
           *  Note that it means that namely user attributes, required actions, and not before are not returned.)
           */
          briefRepresentation?: boolean;
          /** Pagination offset */
          first?: number;
          /** Maximum results size (defaults to 100) */
          max?: number;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/groups/{id}/role-mappings": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["MappingsRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/groups/{id}/role-mappings/clients/{client}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/groups/{id}/role-mappings/clients/{client}/available": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/groups/{id}/role-mappings/clients/{client}/composite": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
          client: string;
        };
        query: {
          /** if false, return roles with their attributes */
          briefRepresentation?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/groups/{id}/role-mappings/realm": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** Roles to add */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/groups/{id}/role-mappings/realm/available": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/groups/{id}/role-mappings/realm/composite": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
        query: {
          /** if false, return roles with their attributes */
          briefRepresentation?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/identity-provider/import-config": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/identity-provider/instances": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** JSON body */
      requestBody: {
        content: {
          "application/json": components["schemas"]["IdentityProviderRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/identity-provider/instances/{alias}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["IdentityProviderRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["IdentityProviderRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        alias: string;
      };
    };
  };
  "/{realm}/identity-provider/instances/{alias}/export": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
        };
        query: {
          /** Format to use */
          format?: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        alias: string;
      };
    };
  };
  "/{realm}/identity-provider/instances/{alias}/management/permissions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ManagementPermissionReference"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        alias: string;
      };
    };
  };
  "/{realm}/identity-provider/instances/{alias}/mapper-types": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        alias: string;
      };
    };
  };
  "/{realm}/identity-provider/instances/{alias}/mappers": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["IdentityProviderMapperRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        alias: string;
      };
    };
  };
  "/{realm}/identity-provider/instances/{alias}/mappers/{id}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
          /** Mapper id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["IdentityProviderMapperRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
          /** Mapper id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["IdentityProviderMapperRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          alias: string;
          /** Mapper id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        alias: string;
        /** Mapper id */
        id: string;
      };
    };
  };
  "/{realm}/identity-provider/providers/{provider_id}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Provider id */
          provider_id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Provider id */
        provider_id: string;
      };
    };
  };
  "/{realm}/keys": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["KeysMetadataRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/ldap-server-capabilities": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** LDAP configuration */
      requestBody: {
        content: {
          "application/json": components["schemas"]["TestLdapConnectionRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/localization": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/localization/{locale}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          locale: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          locale: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          locale: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          locale: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        locale: string;
      };
    };
  };
  "/{realm}/localization/{locale}/{key}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          locale: string;
          key: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "text/plain": string;
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          locale: string;
          key: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "text/plain": string;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          locale: string;
          key: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        locale: string;
        key: string;
      };
    };
  };
  "/{realm}/logout-all": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/partial-export": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          exportClients?: boolean;
          exportGroupsAndRoles?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["RealmRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/partialImport": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["PartialImportRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/push-revocation": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/roles": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          briefRepresentation?: boolean;
          first?: number;
          max?: number;
          search?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/roles-by-id/{role-id}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of role */
          "role-id": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["RoleRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of role */
          "role-id": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** id of role */
          "role-id": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** id of role */
        "role-id": string;
      };
    };
  };
  "/{realm}/roles-by-id/{role-id}/composites": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Role id */
          "role-id": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Role id */
          "role-id": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** Role id */
          "role-id": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** A set of roles to be removed */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** Role id */
        "role-id": string;
      };
    };
  };
  "/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          "role-id": string;
          clientUuid: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        "role-id": string;
        clientUuid: string;
      };
    };
  };
  "/{realm}/roles-by-id/{role-id}/composites/realm": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          "role-id": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        "role-id": string;
      };
    };
  };
  "/{realm}/roles-by-id/{role-id}/management/permissions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          "role-id": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          "role-id": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ManagementPermissionReference"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        "role-id": string;
      };
    };
  };
  "/{realm}/roles/{role-name}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["RoleRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** role’s name (not id!) */
        "role-name": string;
      };
    };
  };
  "/{realm}/roles/{role-name}/composites": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** roles to remove */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** role’s name (not id!) */
        "role-name": string;
      };
    };
  };
  "/{realm}/roles/{role-name}/composites/clients/{clientUuid}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** role’s name (not id!) */
          "role-name": string;
          clientUuid: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** role’s name (not id!) */
        "role-name": string;
        clientUuid: string;
      };
    };
  };
  "/{realm}/roles/{role-name}/composites/realm": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** role’s name (not id!) */
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** role’s name (not id!) */
        "role-name": string;
      };
    };
  };
  "/{realm}/roles/{role-name}/groups": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** the role name. */
          "role-name": string;
        };
        query: {
          /** if false, return a full representation of the {@code GroupRepresentation} objects. */
          briefRepresentation?: boolean;
          /** first result to return. Ignored if negative or {@code null}. */
          first?: number;
          /** maximum number of results to return. Ignored if negative or {@code null}. */
          max?: number;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** the role name. */
        "role-name": string;
      };
    };
  };
  "/{realm}/roles/{role-name}/management/permissions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          "role-name": string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ManagementPermissionReference"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        "role-name": string;
      };
    };
  };
  "/{realm}/roles/{role-name}/users": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** the role name. */
          "role-name": string;
        };
        query: {
          /** first result to return. Ignored if negative or {@code null}. */
          first?: number;
          /** maximum number of results to return. Ignored if negative or {@code null}. */
          max?: number;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** the role name. */
        "role-name": string;
      };
    };
  };
  "/{realm}/sessions/{session}": {
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          session: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        session: string;
      };
    };
  };
  "/{realm}/testLDAPConnection": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TestLdapConnectionRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/testSMTPConnection": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/user-storage/{id}/name": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/user-storage/{id}/remove-imported-users": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/user-storage/{id}/sync": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
        query: {
          action?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["SynchronizationResult"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/user-storage/{id}/unlink-users": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        id: string;
      };
    };
  };
  "/{realm}/user-storage/{parentId}/mappers/{id}/sync": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          parentId: string;
          id: string;
        };
        query: {
          direction?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["SynchronizationResult"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        parentId: string;
        id: string;
      };
    };
  };
  "/{realm}/users": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          /** Boolean which defines whether brief representations are returned (default: false) */
          briefRepresentation?: boolean;
          /** A String contained in email, or the complete email, if param "exact" is true */
          email?: string;
          /** whether the email has been verified */
          emailVerified?: boolean;
          /** Boolean representing if user is enabled or not */
          enabled?: boolean;
          /** Boolean which defines whether the params "last", "first", "email" and "username" must match exactly */
          exact?: boolean;
          /** Pagination offset */
          first?: number;
          /** A String contained in firstName, or the complete firstName, if param "exact" is true */
          firstName?: string;
          /** The alias of an Identity Provider linked to the user */
          idpAlias?: string;
          /** The userId at an Identity Provider linked to the user */
          idpUserId?: string;
          /** A String contained in lastName, or the complete lastName, if param "exact" is true */
          lastName?: string;
          /** Maximum results size (defaults to 100) */
          max?: number;
          /** A String contained in username, first or last name, or email */
          search?: string;
          /** A String contained in username, or the complete username, if param "exact" is true */
          username?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/users-management-permissions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["ManagementPermissionReference"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ManagementPermissionReference"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/users/count": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
        query: {
          /** email filter */
          email?: string;
          emailVerified?: boolean;
          /** first name filter */
          firstName?: string;
          /** last name filter */
          lastName?: string;
          /** arbitrary search string for all the fields below */
          search?: string;
          /** username filter */
          username?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": number;
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/users/profile": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": string;
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": string;
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
      };
    };
  };
  "/{realm}/users/{id}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["UserRepresentation"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/configured-user-storage-credential-types": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/consents": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/consents/{client}": {
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          /** Client id */
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        /** Client id */
        client: string;
      };
    };
  };
  "/{realm}/users/{id}/credentials": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/credentials/{credentialId}": {
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          credentialId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        credentialId: string;
      };
    };
  };
  "/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          /** The credential to move */
          credentialId: string;
          /** The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list. */
          newPreviousCredentialId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        /** The credential to move */
        credentialId: string;
        /** The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list. */
        newPreviousCredentialId: string;
      };
    };
  };
  "/{realm}/users/{id}/credentials/{credentialId}/moveToFirst": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          /** The credential to move */
          credentialId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        /** The credential to move */
        credentialId: string;
      };
    };
  };
  "/{realm}/users/{id}/credentials/{credentialId}/userLabel": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          credentialId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "text/plain": string;
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        credentialId: string;
      };
    };
  };
  "/{realm}/users/{id}/disable-credential-types": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": string[];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/execute-actions-email": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
        query: {
          /** Client id */
          client_id?: string;
          /** Number of seconds after which the generated token expires */
          lifespan?: number;
          /** Redirect uri */
          redirect_uri?: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** required actions the user needs to complete */
      requestBody: {
        content: {
          "application/json": string[];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/federated-identity": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/federated-identity/{provider}": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          /** Social login provider id */
          provider: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FederatedIdentityRepresentation"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          /** Social login provider id */
          provider: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        /** Social login provider id */
        provider: string;
      };
    };
  };
  "/{realm}/users/{id}/groups": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
        query: {
          briefRepresentation?: boolean;
          first?: number;
          max?: number;
          search?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/groups/count": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
        query: {
          search?: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/groups/{groupId}": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          groupId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          groupId: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        groupId: string;
      };
    };
  };
  "/{realm}/users/{id}/impersonation": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/logout": {
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/offline-sessions/{clientUuid}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          clientUuid: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        clientUuid: string;
      };
    };
  };
  "/{realm}/users/{id}/reset-password": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** The representation must contain a rawPassword with the plain-text password */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CredentialRepresentation"];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/role-mappings": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": components["schemas"]["MappingsRepresentation"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/role-mappings/clients/{client}": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/users/{id}/role-mappings/clients/{client}/available": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          client: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/users/{id}/role-mappings/clients/{client}/composite": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
          client: string;
        };
        query: {
          /** if false, return roles with their attributes */
          briefRepresentation?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
        client: string;
      };
    };
  };
  "/{realm}/users/{id}/role-mappings/realm": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      /** Roles to add */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRepresentation"][];
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/role-mappings/realm/available": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/role-mappings/realm/composite": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
        query: {
          /** if false, return roles with their attributes */
          briefRepresentation?: boolean;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/send-verify-email": {
    put: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
        query: {
          /** Client id */
          client_id?: string;
          /** Redirect uri */
          redirect_uri?: string;
        };
      };
      responses: {
        /** success */
        "2XX": unknown;
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
  "/{realm}/users/{id}/sessions": {
    get: {
      parameters: {
        path: {
          /** realm name (not id!) */
          realm: string;
          /** User id */
          id: string;
        };
      };
      responses: {
        /** success */
        "2XX": {
          content: {
            "application/json": { [key: string]: unknown }[];
          };
        };
      };
    };
    parameters: {
      path: {
        /** realm name (not id!) */
        realm: string;
        /** User id */
        id: string;
      };
    };
  };
}

export interface components {
  schemas: {
    AccessToken: {
      acr?: string;
      address?: components["schemas"]["AddressClaimSet"];
      "allowed-origins"?: string[];
      at_hash?: string;
      auth_time?: number;
      authorization?: components["schemas"]["AccessToken-Authorization"];
      azp?: string;
      birthdate?: string;
      c_hash?: string;
      category?:
        | "INTERNAL"
        | "ACCESS"
        | "ID"
        | "ADMIN"
        | "USERINFO"
        | "LOGOUT"
        | "AUTHORIZATION_RESPONSE";
      claims_locales?: string;
      cnf?: components["schemas"]["AccessToken-CertConf"];
      email?: string;
      email_verified?: boolean;
      exp?: number;
      family_name?: string;
      gender?: string;
      given_name?: string;
      iat?: number;
      iss?: string;
      jti?: string;
      locale?: string;
      middle_name?: string;
      name?: string;
      nbf?: number;
      nickname?: string;
      nonce?: string;
      otherClaims?: { [key: string]: unknown };
      phone_number?: string;
      phone_number_verified?: boolean;
      picture?: string;
      preferred_username?: string;
      profile?: string;
      realm_access?: components["schemas"]["AccessToken-Access"];
      s_hash?: string;
      scope?: string;
      session_state?: string;
      sid?: string;
      sub?: string;
      "trusted-certs"?: string[];
      typ?: string;
      updated_at?: number;
      website?: string;
      zoneinfo?: string;
    };
    "AccessToken-Access": {
      roles?: string[];
      verify_caller?: boolean;
    };
    "AccessToken-Authorization": {
      permissions?: components["schemas"]["Permission"][];
    };
    "AccessToken-CertConf": {
      "x5t#S256"?: string;
    };
    AddressClaimSet: {
      country?: string;
      formatted?: string;
      locality?: string;
      postal_code?: string;
      region?: string;
      street_address?: string;
    };
    AuthenticationExecutionExportRepresentation: {
      authenticator?: string;
      authenticatorConfig?: string;
      authenticatorFlow?: boolean;
      flowAlias?: string;
      priority?: number;
      requirement?: string;
      userSetupAllowed?: boolean;
    };
    AuthenticationExecutionInfoRepresentation: {
      alias?: string;
      authenticationConfig?: string;
      authenticationFlow?: boolean;
      configurable?: boolean;
      description?: string;
      displayName?: string;
      flowId?: string;
      id?: string;
      index?: number;
      level?: number;
      providerId?: string;
      requirement?: string;
      requirementChoices?: string[];
    };
    AuthenticationExecutionRepresentation: {
      authenticator?: string;
      authenticatorConfig?: string;
      authenticatorFlow?: boolean;
      flowId?: string;
      id?: string;
      parentFlow?: string;
      priority?: number;
      requirement?: string;
    };
    AuthenticationFlowRepresentation: {
      alias?: string;
      authenticationExecutions?: components["schemas"]["AuthenticationExecutionExportRepresentation"][];
      builtIn?: boolean;
      description?: string;
      id?: string;
      providerId?: string;
      topLevel?: boolean;
    };
    AuthenticatorConfigInfoRepresentation: {
      helpText?: string;
      name?: string;
      properties?: components["schemas"]["ConfigPropertyRepresentation"][];
      providerId?: string;
    };
    AuthenticatorConfigRepresentation: {
      alias?: string;
      config?: { [key: string]: unknown };
      id?: string;
    };
    CertificateRepresentation: {
      certificate?: string;
      kid?: string;
      privateKey?: string;
      publicKey?: string;
    };
    ClientInitialAccessCreatePresentation: {
      count?: number;
      expiration?: number;
    };
    ClientInitialAccessPresentation: {
      count?: number;
      expiration?: number;
      id?: string;
      remainingCount?: number;
      timestamp?: number;
      token?: string;
    };
    ClientMappingsRepresentation: {
      client?: string;
      id?: string;
      mappings?: components["schemas"]["RoleRepresentation"][];
    };
    ClientPoliciesRepresentation: {
      policies?: components["schemas"]["ClientPolicyRepresentation"][];
    };
    ClientPolicyConditionRepresentation: {
      condition?: string;
      configuration?: components["schemas"]["JsonNode"];
    };
    ClientPolicyExecutorRepresentation: {
      configuration?: components["schemas"]["JsonNode"];
      executor?: string;
    };
    ClientPolicyRepresentation: {
      conditions?: components["schemas"]["ClientPolicyConditionRepresentation"][];
      description?: string;
      enabled?: boolean;
      name?: string;
      profiles?: string[];
    };
    ClientProfileRepresentation: {
      description?: string;
      executors?: components["schemas"]["ClientPolicyExecutorRepresentation"][];
      name?: string;
    };
    ClientProfilesRepresentation: {
      globalProfiles?: components["schemas"]["ClientProfileRepresentation"][];
      profiles?: components["schemas"]["ClientProfileRepresentation"][];
    };
    ClientRepresentation: {
      access?: { [key: string]: unknown };
      adminUrl?: string;
      alwaysDisplayInConsole?: boolean;
      attributes?: { [key: string]: unknown };
      authenticationFlowBindingOverrides?: { [key: string]: unknown };
      authorizationServicesEnabled?: boolean;
      authorizationSettings?: components["schemas"]["ResourceServerRepresentation"];
      baseUrl?: string;
      bearerOnly?: boolean;
      clientAuthenticatorType?: string;
      clientId?: string;
      consentRequired?: boolean;
      defaultClientScopes?: string[];
      description?: string;
      directAccessGrantsEnabled?: boolean;
      enabled?: boolean;
      frontchannelLogout?: boolean;
      fullScopeAllowed?: boolean;
      id?: string;
      implicitFlowEnabled?: boolean;
      name?: string;
      nodeReRegistrationTimeout?: number;
      notBefore?: number;
      oauth2DeviceAuthorizationGrantEnabled?: boolean;
      optionalClientScopes?: string[];
      origin?: string;
      protocol?: string;
      protocolMappers?: components["schemas"]["ProtocolMapperRepresentation"][];
      publicClient?: boolean;
      redirectUris?: string[];
      registeredNodes?: { [key: string]: unknown };
      registrationAccessToken?: string;
      rootUrl?: string;
      secret?: string;
      serviceAccountsEnabled?: boolean;
      standardFlowEnabled?: boolean;
      surrogateAuthRequired?: boolean;
      webOrigins?: string[];
    };
    "ClientScopeEvaluateResource-ProtocolMapperEvaluationRepresentation": {
      containerId?: string;
      containerName?: string;
      containerType?: string;
      mapperId?: string;
      mapperName?: string;
      protocolMapper?: string;
    };
    ClientScopeRepresentation: {
      attributes?: { [key: string]: unknown };
      description?: string;
      id?: string;
      name?: string;
      protocol?: string;
      protocolMappers?: components["schemas"]["ProtocolMapperRepresentation"][];
    };
    ComponentExportRepresentation: {
      config?: components["schemas"]["MultivaluedHashMap"];
      id?: string;
      name?: string;
      providerId?: string;
      subComponents?: components["schemas"]["MultivaluedHashMap"];
      subType?: string;
    };
    ComponentRepresentation: {
      config?: components["schemas"]["MultivaluedHashMap"];
      id?: string;
      name?: string;
      parentId?: string;
      providerId?: string;
      providerType?: string;
      subType?: string;
    };
    ConfigPropertyRepresentation: {
      defaultValue?: { [key: string]: unknown };
      helpText?: string;
      label?: string;
      name?: string;
      options?: string[];
      secret?: boolean;
      type?: string;
    };
    CredentialRepresentation: {
      createdDate?: number;
      credentialData?: string;
      id?: string;
      priority?: number;
      secretData?: string;
      temporary?: boolean;
      type?: string;
      userLabel?: string;
      value?: string;
    };
    FederatedIdentityRepresentation: {
      identityProvider?: string;
      userId?: string;
      userName?: string;
    };
    GlobalRequestResult: {
      failedRequests?: string[];
      successRequests?: string[];
    };
    GroupRepresentation: {
      access?: { [key: string]: unknown };
      attributes?: { [key: string]: unknown };
      clientRoles?: { [key: string]: unknown };
      id?: string;
      name?: string;
      path?: string;
      realmRoles?: string[];
      subGroups?: components["schemas"]["GroupRepresentation"][];
    };
    IDToken: {
      acr?: string;
      address?: components["schemas"]["AddressClaimSet"];
      at_hash?: string;
      auth_time?: number;
      azp?: string;
      birthdate?: string;
      c_hash?: string;
      category?:
        | "INTERNAL"
        | "ACCESS"
        | "ID"
        | "ADMIN"
        | "USERINFO"
        | "LOGOUT"
        | "AUTHORIZATION_RESPONSE";
      claims_locales?: string;
      email?: string;
      email_verified?: boolean;
      exp?: number;
      family_name?: string;
      gender?: string;
      given_name?: string;
      iat?: number;
      iss?: string;
      jti?: string;
      locale?: string;
      middle_name?: string;
      name?: string;
      nbf?: number;
      nickname?: string;
      nonce?: string;
      otherClaims?: { [key: string]: unknown };
      phone_number?: string;
      phone_number_verified?: boolean;
      picture?: string;
      preferred_username?: string;
      profile?: string;
      s_hash?: string;
      session_state?: string;
      sid?: string;
      sub?: string;
      typ?: string;
      updated_at?: number;
      website?: string;
      zoneinfo?: string;
    };
    IdentityProviderMapperRepresentation: {
      config?: { [key: string]: unknown };
      id?: string;
      identityProviderAlias?: string;
      identityProviderMapper?: string;
      name?: string;
    };
    IdentityProviderRepresentation: {
      addReadTokenRoleOnCreate?: boolean;
      alias?: string;
      config?: { [key: string]: unknown };
      displayName?: string;
      enabled?: boolean;
      firstBrokerLoginFlowAlias?: string;
      internalId?: string;
      linkOnly?: boolean;
      postBrokerLoginFlowAlias?: string;
      providerId?: string;
      storeToken?: boolean;
      trustEmail?: boolean;
    };
    JsonNode: {
      array?: boolean;
      bigDecimal?: boolean;
      bigInteger?: boolean;
      binary?: boolean;
      boolean?: boolean;
      containerNode?: boolean;
      double?: boolean;
      empty?: boolean;
      float?: boolean;
      floatingPointNumber?: boolean;
      int?: boolean;
      integralNumber?: boolean;
      long?: boolean;
      missingNode?: boolean;
      nodeType?:
        | "ARRAY"
        | "BINARY"
        | "BOOLEAN"
        | "MISSING"
        | "NULL"
        | "NUMBER"
        | "OBJECT"
        | "POJO"
        | "STRING";
      null?: boolean;
      number?: boolean;
      object?: boolean;
      pojo?: boolean;
      short?: boolean;
      textual?: boolean;
      valueNode?: boolean;
    };
    KeyStoreConfig: {
      format?: string;
      keyAlias?: string;
      keyPassword?: string;
      realmAlias?: string;
      realmCertificate?: boolean;
      storePassword?: string;
    };
    KeysMetadataRepresentation: {
      active?: { [key: string]: unknown };
      keys?: components["schemas"]["KeysMetadataRepresentation-KeyMetadataRepresentation"][];
    };
    "KeysMetadataRepresentation-KeyMetadataRepresentation": {
      algorithm?: string;
      certificate?: string;
      kid?: string;
      providerId?: string;
      providerPriority?: number;
      publicKey?: string;
      status?: string;
      type?: string;
      use?: "SIG" | "ENC";
    };
    ManagementPermissionReference: {
      enabled?: boolean;
      resource?: string;
      scopePermissions?: { [key: string]: unknown };
    };
    MappingsRepresentation: {
      clientMappings?: { [key: string]: unknown };
      realmMappings?: components["schemas"]["RoleRepresentation"][];
    };
    MemoryInfoRepresentation: {
      free?: number;
      freeFormated?: string;
      freePercentage?: number;
      total?: number;
      totalFormated?: string;
      used?: number;
      usedFormated?: string;
    };
    MultivaluedHashMap: {
      empty?: boolean;
      loadFactor?: number;
      threshold?: number;
    };
    PartialImportRepresentation: {
      clients?: components["schemas"]["ClientRepresentation"][];
      groups?: components["schemas"]["GroupRepresentation"][];
      identityProviders?: components["schemas"]["IdentityProviderRepresentation"][];
      ifResourceExists?: string;
      policy?: "SKIP" | "OVERWRITE" | "FAIL";
      roles?: components["schemas"]["RolesRepresentation"];
      users?: components["schemas"]["UserRepresentation"][];
    };
    PasswordPolicyTypeRepresentation: {
      configType?: string;
      defaultValue?: string;
      displayName?: string;
      id?: string;
      multipleSupported?: boolean;
    };
    Permission: {
      claims?: { [key: string]: unknown };
      rsid?: string;
      rsname?: string;
      scopes?: string[];
    };
    PolicyRepresentation: {
      config?: { [key: string]: unknown };
      decisionStrategy?: "AFFIRMATIVE" | "UNANIMOUS" | "CONSENSUS";
      description?: string;
      id?: string;
      logic?: "POSITIVE" | "NEGATIVE";
      name?: string;
      owner?: string;
      policies?: string[];
      resources?: string[];
      resourcesData?: components["schemas"]["ResourceRepresentation"][];
      scopes?: string[];
      scopesData?: components["schemas"]["ScopeRepresentation"][];
      type?: string;
    };
    ProfileInfoRepresentation: {
      disabledFeatures?: string[];
      experimentalFeatures?: string[];
      name?: string;
      previewFeatures?: string[];
    };
    ProtocolMapperRepresentation: {
      config?: { [key: string]: unknown };
      id?: string;
      name?: string;
      protocol?: string;
      protocolMapper?: string;
    };
    ProviderRepresentation: {
      operationalInfo?: { [key: string]: unknown };
      order?: number;
    };
    RealmEventsConfigRepresentation: {
      adminEventsDetailsEnabled?: boolean;
      adminEventsEnabled?: boolean;
      enabledEventTypes?: string[];
      eventsEnabled?: boolean;
      eventsExpiration?: number;
      eventsListeners?: string[];
    };
    RealmRepresentation: {
      accessCodeLifespan?: number;
      accessCodeLifespanLogin?: number;
      accessCodeLifespanUserAction?: number;
      accessTokenLifespan?: number;
      accessTokenLifespanForImplicitFlow?: number;
      accountTheme?: string;
      actionTokenGeneratedByAdminLifespan?: number;
      actionTokenGeneratedByUserLifespan?: number;
      adminEventsDetailsEnabled?: boolean;
      adminEventsEnabled?: boolean;
      adminTheme?: string;
      attributes?: { [key: string]: unknown };
      authenticationFlows?: components["schemas"]["AuthenticationFlowRepresentation"][];
      authenticatorConfig?: components["schemas"]["AuthenticatorConfigRepresentation"][];
      browserFlow?: string;
      browserSecurityHeaders?: { [key: string]: unknown };
      bruteForceProtected?: boolean;
      clientAuthenticationFlow?: string;
      clientOfflineSessionIdleTimeout?: number;
      clientOfflineSessionMaxLifespan?: number;
      clientPolicies?: components["schemas"]["JsonNode"];
      clientProfiles?: components["schemas"]["JsonNode"];
      clientScopeMappings?: { [key: string]: unknown };
      clientScopes?: components["schemas"]["ClientScopeRepresentation"][];
      clientSessionIdleTimeout?: number;
      clientSessionMaxLifespan?: number;
      clients?: components["schemas"]["ClientRepresentation"][];
      components?: components["schemas"]["MultivaluedHashMap"];
      defaultDefaultClientScopes?: string[];
      defaultGroups?: string[];
      defaultLocale?: string;
      defaultOptionalClientScopes?: string[];
      defaultRole?: components["schemas"]["RoleRepresentation"];
      defaultSignatureAlgorithm?: string;
      directGrantFlow?: string;
      displayName?: string;
      displayNameHtml?: string;
      dockerAuthenticationFlow?: string;
      duplicateEmailsAllowed?: boolean;
      editUsernameAllowed?: boolean;
      emailTheme?: string;
      enabled?: boolean;
      enabledEventTypes?: string[];
      eventsEnabled?: boolean;
      eventsExpiration?: number;
      eventsListeners?: string[];
      failureFactor?: number;
      federatedUsers?: components["schemas"]["UserRepresentation"][];
      groups?: components["schemas"]["GroupRepresentation"][];
      id?: string;
      identityProviderMappers?: components["schemas"]["IdentityProviderMapperRepresentation"][];
      identityProviders?: components["schemas"]["IdentityProviderRepresentation"][];
      internationalizationEnabled?: boolean;
      keycloakVersion?: string;
      loginTheme?: string;
      loginWithEmailAllowed?: boolean;
      maxDeltaTimeSeconds?: number;
      maxFailureWaitSeconds?: number;
      minimumQuickLoginWaitSeconds?: number;
      notBefore?: number;
      oAuth2DeviceCodeLifespan?: number;
      oAuth2DevicePollingInterval?: number;
      oauth2DeviceCodeLifespan?: number;
      oauth2DevicePollingInterval?: number;
      offlineSessionIdleTimeout?: number;
      offlineSessionMaxLifespan?: number;
      offlineSessionMaxLifespanEnabled?: boolean;
      otpPolicyAlgorithm?: string;
      otpPolicyDigits?: number;
      otpPolicyInitialCounter?: number;
      otpPolicyLookAheadWindow?: number;
      otpPolicyPeriod?: number;
      otpPolicyType?: string;
      otpSupportedApplications?: string[];
      passwordPolicy?: string;
      permanentLockout?: boolean;
      protocolMappers?: components["schemas"]["ProtocolMapperRepresentation"][];
      quickLoginCheckMilliSeconds?: number;
      realm?: string;
      refreshTokenMaxReuse?: number;
      registrationAllowed?: boolean;
      registrationEmailAsUsername?: boolean;
      registrationFlow?: string;
      rememberMe?: boolean;
      requiredActions?: components["schemas"]["RequiredActionProviderRepresentation"][];
      resetCredentialsFlow?: string;
      resetPasswordAllowed?: boolean;
      revokeRefreshToken?: boolean;
      roles?: components["schemas"]["RolesRepresentation"];
      scopeMappings?: components["schemas"]["ScopeMappingRepresentation"][];
      smtpServer?: { [key: string]: unknown };
      sslRequired?: string;
      ssoSessionIdleTimeout?: number;
      ssoSessionIdleTimeoutRememberMe?: number;
      ssoSessionMaxLifespan?: number;
      ssoSessionMaxLifespanRememberMe?: number;
      supportedLocales?: string[];
      userFederationMappers?: components["schemas"]["UserFederationMapperRepresentation"][];
      userFederationProviders?: components["schemas"]["UserFederationProviderRepresentation"][];
      userManagedAccessAllowed?: boolean;
      users?: components["schemas"]["UserRepresentation"][];
      verifyEmail?: boolean;
      waitIncrementSeconds?: number;
      webAuthnPolicyAcceptableAaguids?: string[];
      webAuthnPolicyAttestationConveyancePreference?: string;
      webAuthnPolicyAuthenticatorAttachment?: string;
      webAuthnPolicyAvoidSameAuthenticatorRegister?: boolean;
      webAuthnPolicyCreateTimeout?: number;
      webAuthnPolicyPasswordlessAcceptableAaguids?: string[];
      webAuthnPolicyPasswordlessAttestationConveyancePreference?: string;
      webAuthnPolicyPasswordlessAuthenticatorAttachment?: string;
      webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister?: boolean;
      webAuthnPolicyPasswordlessCreateTimeout?: number;
      webAuthnPolicyPasswordlessRequireResidentKey?: string;
      webAuthnPolicyPasswordlessRpEntityName?: string;
      webAuthnPolicyPasswordlessRpId?: string;
      webAuthnPolicyPasswordlessSignatureAlgorithms?: string[];
      webAuthnPolicyPasswordlessUserVerificationRequirement?: string;
      webAuthnPolicyRequireResidentKey?: string;
      webAuthnPolicyRpEntityName?: string;
      webAuthnPolicyRpId?: string;
      webAuthnPolicySignatureAlgorithms?: string[];
      webAuthnPolicyUserVerificationRequirement?: string;
    };
    RequiredActionProviderRepresentation: {
      alias?: string;
      config?: { [key: string]: unknown };
      defaultAction?: boolean;
      enabled?: boolean;
      name?: string;
      priority?: number;
      providerId?: string;
    };
    ResourceRepresentation: {
      id?: string;
      attributes?: { [key: string]: unknown };
      displayName?: string;
      icon_uri?: string;
      name?: string;
      ownerManagedAccess?: boolean;
      scopes?: components["schemas"]["ScopeRepresentation"][];
      type?: string;
      uris?: string[];
    };
    ResourceServerRepresentation: {
      allowRemoteResourceManagement?: boolean;
      clientId?: string;
      decisionStrategy?: "AFFIRMATIVE" | "UNANIMOUS" | "CONSENSUS";
      id?: string;
      name?: string;
      policies?: components["schemas"]["PolicyRepresentation"][];
      policyEnforcementMode?: "ENFORCING" | "PERMISSIVE" | "DISABLED";
      resources?: components["schemas"]["ResourceRepresentation"][];
      scopes?: components["schemas"]["ScopeRepresentation"][];
    };
    RoleRepresentation: {
      attributes?: { [key: string]: unknown };
      clientRole?: boolean;
      composite?: boolean;
      composites?: components["schemas"]["RoleRepresentation-Composites"];
      containerId?: string;
      description?: string;
      id?: string;
      name?: string;
    };
    "RoleRepresentation-Composites": {
      client?: { [key: string]: unknown };
      realm?: string[];
    };
    RolesRepresentation: {
      client?: { [key: string]: unknown };
      realm?: components["schemas"]["RoleRepresentation"][];
    };
    ScopeMappingRepresentation: {
      client?: string;
      clientScope?: string;
      roles?: string[];
      self?: string;
    };
    ScopeRepresentation: {
      displayName?: string;
      iconUri?: string;
      id?: string;
      name?: string;
      policies?: components["schemas"]["PolicyRepresentation"][];
      resources?: components["schemas"]["ResourceRepresentation"][];
    };
    ServerInfoRepresentation: {
      builtinProtocolMappers?: { [key: string]: unknown };
      clientImporters?: { [key: string]: unknown }[];
      clientInstallations?: { [key: string]: unknown };
      componentTypes?: { [key: string]: unknown };
      enums?: { [key: string]: unknown };
      identityProviders?: { [key: string]: unknown }[];
      memoryInfo?: components["schemas"]["MemoryInfoRepresentation"];
      passwordPolicies?: components["schemas"]["PasswordPolicyTypeRepresentation"][];
      profileInfo?: components["schemas"]["ProfileInfoRepresentation"];
      protocolMapperTypes?: { [key: string]: unknown };
      providers?: { [key: string]: unknown };
      socialProviders?: { [key: string]: unknown }[];
      systemInfo?: components["schemas"]["SystemInfoRepresentation"];
      themes?: { [key: string]: unknown };
    };
    SpiInfoRepresentation: {
      internal?: boolean;
      providers?: { [key: string]: unknown };
    };
    SynchronizationResult: {
      added?: number;
      failed?: number;
      ignored?: boolean;
      removed?: number;
      status?: string;
      updated?: number;
    };
    SystemInfoRepresentation: {
      fileEncoding?: string;
      javaHome?: string;
      javaRuntime?: string;
      javaVendor?: string;
      javaVersion?: string;
      javaVm?: string;
      javaVmVersion?: string;
      osArchitecture?: string;
      osName?: string;
      osVersion?: string;
      serverTime?: string;
      uptime?: string;
      uptimeMillis?: number;
      userDir?: string;
      userLocale?: string;
      userName?: string;
      userTimezone?: string;
      version?: string;
    };
    TestLdapConnectionRepresentation: {
      action?: string;
      authType?: string;
      bindCredential?: string;
      bindDn?: string;
      componentId?: string;
      connectionTimeout?: string;
      connectionUrl?: string;
      startTls?: string;
      useTruststoreSpi?: string;
    };
    UserConsentRepresentation: {
      clientId?: string;
      createdDate?: number;
      grantedClientScopes?: string[];
      lastUpdatedDate?: number;
    };
    UserFederationMapperRepresentation: {
      config?: { [key: string]: unknown };
      federationMapperType?: string;
      federationProviderDisplayName?: string;
      id?: string;
      name?: string;
    };
    UserFederationProviderRepresentation: {
      changedSyncPeriod?: number;
      config?: { [key: string]: unknown };
      displayName?: string;
      fullSyncPeriod?: number;
      id?: string;
      lastSync?: number;
      priority?: number;
      providerName?: string;
    };
    UserRepresentation: {
      access?: { [key: string]: unknown };
      attributes?: { [key: string]: unknown };
      clientConsents?: components["schemas"]["UserConsentRepresentation"][];
      clientRoles?: { [key: string]: unknown };
      createdTimestamp?: number;
      credentials?: components["schemas"]["CredentialRepresentation"][];
      disableableCredentialTypes?: string[];
      email?: string;
      emailVerified?: boolean;
      enabled?: boolean;
      federatedIdentities?: components["schemas"]["FederatedIdentityRepresentation"][];
      federationLink?: string;
      firstName?: string;
      groups?: string[];
      id?: string;
      lastName?: string;
      notBefore?: number;
      origin?: string;
      realmRoles?: string[];
      requiredActions?: string[];
      self?: string;
      serviceAccountClientId?: string;
      username?: string;
    };
  };
}

export interface operations {}

export interface external {}
