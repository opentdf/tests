name: X-Test
on:
  pull_request:
  repository_dispatch:
    types: [xtest]
  schedule:
    - cron: "30 6 * * *"
  # workflow_dispatch:
  #   inputs:
  #     backendVersion:
  #       required: true
  #       type: string
jobs:
  cross-client-test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: xtest
    permissions:
      contents: read
      packages: read
    # strategy:
    #   matrix:
    #     kasversion: [ python-kas, go-kas ]
    steps:
      - uses: actions/checkout@v3
      # - name: Set kas-related environment variable
      #   shell: bash
      #   run: echo "KAS_VERSION=${{ matrix.kasversion }}" >> $GITHUB_ENV
      - name: Set up Node 20
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          registry-url: https://npm.pkg.github.com
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      # todo: install and activate virtual env for python?
      - name: update packages
        run: |-
          npm ci
          npm install @opentdf/cli@${{ github.event.client_payload.version }} # @opentdf/client@${{ github.event.client_payload.version }}
          npm list
          pip3 install -r requirements.txt
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check out platform
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          repository: opentdf/platform
      - name: Set up go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7
        with:
          go-version: "1.22.3"
          check-latest: false
          cache-dependency-path: |
            platform/service/go.sum
            platform/examples/go.sum
            platform/protocol/go/go.sum
            platform/sdk/go.sum
      - run: |
          cd platform
          .github/scripts/init-temp-keys.sh
          cp opentdf-dev.yaml opentdf.yaml
      - name: Added Trusted Certs
        run: |
          sudo chmod -R 777 ./keys
          sudo apt-get install -y ca-certificates
          sudo cp ./keys/localhost.crt /usr/local/share/ca-certificates
          sudo update-ca-certificates
      - run: docker compose up -d --wait --wait-timeout 240
      - run: go run ./service provision keycloak
      - run: go run ./service provision fixtures
      - uses: JarvusInnovations/background-action@2428e7b970a846423095c79d43f759abf979a635
        name: start server in background
        with:
          run: >
            go build -o opentdf -v service/main.go
            && .github/scripts/watch.sh opentdf.yaml ./opentdf start
          wait-on: |
            tcp:localhost:8080
          log-output-if: true
          wait-for: 90s
    # TODO: parameterize the version so we can trigger this from the cli workflwos
      - name: get otdfctl
        run: |-
          cd ..
          curl -O -L https://github.com/opentdf/otdfctl/releases/download/latest/otdfctl-v0.8.0-linux-amd64.tar.gz
          tar -xvzf otdfctl-v0.8.0-linux-amd64.tar.gz
          cp target/otdfctl-v0.8.0-linux-amd64 sdk/go/otdfctl
      - name: Run xtests
        run: |-
          # cd ../xtest
          npm run test

  # unbound-test-js:
  #   timeout-minutes: 60
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: xtest
  #   permissions:
  #     contents: read
  #     packages: read
  #   strategy:
  #     matrix:
  #       kasversion: [ python-kas, go-kas ]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set kas-related environment variable
  #       shell: bash
  #       run: echo "KAS_VERSION=${{ matrix.kasversion }}" >> $GITHUB_ENV
  #     - name: Set up Node 18
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18.x"
  #         registry-url: https://npm.pkg.github.com
  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10"
  #     # todo: install and activate virtual env for python?
  #     - name: update packages
  #       run: |-
  #         npm ci
  #         npm install @opentdf/cli@${{ github.event.client_payload.version }} @opentdf/client@${{ github.event.client_payload.version }}
  #         npm list
  #         pip3 install -r requirements.txt
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: yokawasa/action-setup-kube-tools@v0.9.2
  #       with:
  #         setup-tools: |
  #           kubectl
  #           helm
  #           tilt
  #         # This should be in sync with the minikube-deployed kube version below
  #         kubectl: "1.24.1"
  #         helm: "3.9.2"
  #         tilt: "0.31.2"
  #     - run: |
  #         kubectl version --client
  #         kustomize version
  #         tilt version
  #     - name: start minikube
  #       id: minikube
  #       uses: medyagh/setup-minikube@master
  #       with:
  #         minikube-version: 1.26.0
  #         # This should be in sync with the setup-tools version above
  #         kubernetes-version: 1.24.1
  #     - name: Run tilt
  #       run: |-
  #         [[ -z "${{github.event.inputs.backendVersion}}" ]] && export BACKEND_LATEST_VERSION=$(skopeo list-tags docker://ghcr.io/opentdf/charts/backend \
  #         | python3 -c "import sys, json; sys.stdout.write([tag for tag in json.load(sys.stdin)['Tags'] if not tag.endswith('.sig')][-1])") || export BACKEND_LATEST_VERSION="${{github.event.inputs.backendVersion}}"
  #         echo "Testing Backend [$BACKEND_LATEST_VERSION]">>$GITHUB_STEP_SUMMARY
  #         kubectl version
  #         tilt ci -f Tiltfile.unbound-js-sdk
  # unbound-test-py:
  #   timeout-minutes: 60
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: xtest
  #   permissions:
  #     contents: read
  #     packages: read
  #   strategy:
  #     matrix:
  #       kasversion: [ python-kas, go-kas ]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set kas-related environment variable
  #       shell: bash
  #       run: echo "KAS_VERSION=${{ matrix.kasversion }}" >> $GITHUB_ENV
  #     - name: Set up Node 18
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18.x"
  #         registry-url: https://npm.pkg.github.com
  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10"
  #     # todo: install and activate virtual env for python?
  #     - name: update packages
  #       run: |-
  #         npm ci
  #         npm install @opentdf/cli@${{ github.event.client_payload.version }} @opentdf/client@${{ github.event.client_payload.version }}
  #         npm list
  #         pip3 install -r requirements.txt
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: yokawasa/action-setup-kube-tools@v0.9.2
  #       with:
  #         setup-tools: |
  #           kubectl
  #           helm
  #           tilt
  #         # This should be in sync with the minikube-deployed kube version below
  #         kubectl: "1.24.1"
  #         helm: "3.9.2"
  #         tilt: "0.31.2"
  #     - run: |
  #         kubectl version --client
  #         kustomize version
  #         tilt version
  #     - name: start minikube
  #       id: minikube
  #       uses: medyagh/setup-minikube@master
  #       with:
  #         minikube-version: 1.26.0
  #         # This should be in sync with the setup-tools version above
  #         kubernetes-version: 1.24.1
  #     - name: Run tilt
  #       run: |-
  #         [[ -z "${{github.event.inputs.backendVersion}}" ]] && export BACKEND_LATEST_VERSION=$(skopeo list-tags docker://ghcr.io/opentdf/charts/backend \
  #         | python3 -c "import sys, json; sys.stdout.write([tag for tag in json.load(sys.stdin)['Tags'] if not tag.endswith('.sig')][-1])") || export BACKEND_LATEST_VERSION="${{github.event.inputs.backendVersion}}"
  #         echo "Testing Backend [$BACKEND_LATEST_VERSION]">>$GITHUB_STEP_SUMMARY
  #         kubectl version
  #         tilt ci -f Tiltfile.unbound-py-sdk