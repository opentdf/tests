name: configure-sdks
description: Check out and build one or more SDK and its CLI tool for use by xtest
inputs:
  sdk:
    description: The SDK to configure; one of go, java, js
    default: go
    type: string
  version:
    description: A space separated list of versions of the SDK to configure. Accepts SHA, branches, and semver tags
    default: latest
    type: string

outputs:
  cli-paths:
    description: The paths to the CLI tool as space separated list. May be a different length than the input versions array, in the event two version specifiers resolve to the same git sha
    type: string

runs:
  using: composite
  steps:
    - name: configure
      run: |
        case "${{ inputs.sdk }}" in
          "go")
            echo "sdk=go" >> $GITHUB_OUTPUT
            echo "sdk-repo=opentdf/otdfctl" >> $GITHUB_OUTPUT
            ;;
          "java")
            echo "sdk=java" >> $GITHUB_OUTPUT
            echo "sdk-repo=opentdf/java-sdk" >> $GITHUB_OUTPUT
            ;;
          "js")
            echo "sdk=js" >> $GITHUB_OUTPUT
            echo "sdk-repo=opentdf/web-sdk" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "Invalid SDK specified: ${{ inputs.sdk }}" >> $GITHUB_STEP_SUMMARY
            exit 1
            ;;
        esac
    - name: validate versions string
      run: |
        if [[ ! ${{ inputs.version }} =~ ^[0-9a-zA-Z\.\ ]+$ ]]; then
          echo "Invalid version string: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        if [[ $(echo "${{ inputs.version }}" | wc -w) -gt 4 ]]; then
          echo "Too many versions specified: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
    - name: checkout xtest/sdk folder
      uses: actions/checkout@v4
      with:
        path: otdf-sdk
        sparse-checkout: xtest/sdk
    - name: Set up Python 3.12
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b
      with:
        python-version: "3.12"
    - name: 🐍 
      run: |-
        pip install -r requirements.txt
    - name: resolve versions
      run: |
        version_info=$(./scripts/resolve-version.py ${{ steps.configure.output.sdk }} ${{ inputs.version }})
        version_a=$(echo "$version_info" | jq -r '.[0] // empty')
        version_b=$(echo "$version_info" | jq -r '.[1] // empty')
        version_c=$(echo "$version_info" | jq -r '.[2] // empty')
        version_d=$(echo "$version_info" | jq -r '.[3] // empty')
        echo "version-a=$version_a" >> $GITHUB_OUTPUT
        echo "version-b=$version_b" >> $GITHUB_OUTPUT
        echo "version-c=$version_c" >> $GITHUB_OUTPUT
        echo "version-d=$version_d" >> $GITHUB_OUTPUT
      with:
        working-directory: otdf-sdk

    - name: checkout version a
      uses: actions/checkout@v4
      if: steps.resolve.outputs.version-a != ''
      with:
        path: otdf-sdk/${{ steps.configure.output.sdk }}-src-${{ fromJson(steps.resolve.outputs.version-a).tag }}
        ref: ${{ fromJson(steps.resolve.outputs.version-a).sha }}
        repository: ${{ steps.configure.output.sdk-repo }}

    - name: checkout version b
      uses: actions/checkout@v4
      if: steps.resolve.outputs.version-b != ''
      with:
        path: otdf-sdk/${{ steps.configure.output.sdk }}-src-${{ fromJson(steps.resolve.outputs.version-b).tag }}
        ref: ${{ fromJson(steps.resolve.outputs.version-b).sha }}
        repository: ${{ steps.configure.output.sdk-repo }}

    - name: checkout version c
      uses: actions/checkout@v4
      if: steps.resolve.outputs.version-c != ''
      with:
        path: otdf-sdk/${{ steps.configure.output.sdk }}-src-${{ fromJson(steps.resolve.outputs.version-c).tag }}
        ref: ${{ fromJson(steps.resolve.outputs.version-c).sha }}
        repository: ${{ steps.configure.output.sdk-repo }}

    - name: checkout version d
      uses: actions/checkout@v4
      if: steps.resolve.outputs.version-d != ''
      with:
        path: otdf-sdk/${{ steps.configure.output.sdk }}-src-${{ fromJson(steps.resolve.outputs.version-d).tag }}
        ref: ${{ fromJson(steps.resolve.outputs.version-d).sha }}
        repository: ${{ steps.configure.output.sdk-repo }}

    - name: set up JDK
      if: inputs.sdk == 'java'
      uses: actions/setup-java@5896cecc08fd8a1fbdfaf517e29b571164b031f7
      with:
        java-version: "11"
        distribution: "adopt"

    - name: Set up Node 22
      if: inputs.sdk == 'js'
      uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
      with:
        node-version: "22.x"
        cache-dependency-path: web-sdk/lib/package-lock.json web-sdk/cli/package-lock.json

    - name: build all checked out versions
      run: |
        for sdk_dir in $(find . -maxdepth 1 -type d -name "${{ steps.configure.output.sdk }}-src-*"); do
          case "${{ steps.configure.output.sdk }}" in
            "go")
              make -C "$sdk_dir" PLATFORM_DIR="$sdk_dir"
              ;;
            "java")
              make -C "$sdk_dir"
              ;;
            "js")
              ./scripts/build-js.sh "$sdk_dir"
              cp ./js/cli/cli.sh "$sdk_dir"/cli/
              ;;
            *)
              echo "Unknown SDK: ${{ steps.configure.output.sdk }}" >> $GITHUB_STEP_SUMMARY
              exit 1
              ;;
          esac
        done
      working-directory: otdf-sdk