name: configure-sdks
description: Check out and build one or more SDK and its CLI tool for use by xtest
inputs:
  path:
    description: The path to checkout the the SDK source code to; concatenated with branch or tag name.
    type: string
  sdk:
    description: The SDK to configure; one of go, java, js
    type: string
  version-info:
    description: JSON-encoded output of resolve-version.py
    type: string
outputs:
  version-a:
    description: "Object containing tag, sha, and name of a version checked out"
    value: ${{ steps.resolve.outputs.version-a }}
  version-b:
    description: "Object containing tag, sha, and name of a version checked out, if two or more were specified"
    value: ${{ steps.resolve.outputs.version-b }}
  version-c:
    description: "Object containing tag, sha, and name of a version checked out, if three or more were specified"
    value: ${{ steps.resolve.outputs.version-c }}
  version-d:
    description: "Object containing tag, sha, and name of a version checked out, if four were specified"
    value: ${{ steps.resolve.outputs.version-d }}
  heads:
    description: "JSON list of tags that represent main or branch heads"
    value: ${{ steps.resolve.outputs.heads }}

runs:
  using: composite
  steps:
    - name: resolve versions
      id: resolve
      shell: bash
      run: |
        if [[ $(echo "$version_info" | jq 'length') -gt 4 ]]; then
          echo "Error: Too many versions resolved in version_info: $(echo "$version_info" | jq 'length')" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

        if echo "$version_info" | jq -e '.[] | select(.error != null)' > /dev/null; then
          echo "Error: One or more errors occurred while resolving versions for ${{ inputs.sdk }}: $version_info"
          exit 1
        fi
        echo "Version Info for ${{ inputs.sdk }}: $version_info"

        version_a=$(echo "$version_info" | jq -rc '.[0] // empty')
        version_b=$(echo "$version_info" | jq -rc '.[1] // empty')
        version_c=$(echo "$version_info" | jq -rc '.[2] // empty')
        version_d=$(echo "$version_info" | jq -rc '.[3] // empty')
        echo "version-a=$version_a" >> $GITHUB_OUTPUT
        echo "version-b=$version_b" >> $GITHUB_OUTPUT
        echo "version-c=$version_c" >> $GITHUB_OUTPUT
        echo "version-d=$version_d" >> $GITHUB_OUTPUT
        head_tags=$(echo "$version_info" | jq -c '[.[] | select(.head == true) | .tag]')
        echo "head_tags=$head_tags"
        echo "heads=$head_tags" >> $GITHUB_OUTPUT
      env:
        version_info: ${{ inputs.version-info }}

    - name: checkout version a
      uses: actions/checkout@v4
      if: steps.resolve.outputs.version-a != ''
      with:
        path: ${{ inputs.path }}/${{ inputs.sdk }}/src/${{ fromJson(steps.resolve.outputs.version-a).tag }}
        ref: ${{ fromJson(steps.resolve.outputs.version-a).sha }}
        repository: ${{ env.sdk_repo }}

    - name: checkout version b
      uses: actions/checkout@v4
      if: steps.resolve.outputs.version-b != ''
      with:
        path: ${{ inputs.path }}/${{ inputs.sdk }}/src/${{ fromJson(steps.resolve.outputs.version-b).tag }}
        ref: ${{ fromJson(steps.resolve.outputs.version-b).sha }}
        repository: ${{ env.sdk_repo }}

    - name: checkout version c
      uses: actions/checkout@v4
      if: steps.resolve.outputs.version-c != ''
      with:
        path: ${{ inputs.path }}/${{ inputs.sdk }}/src/${{ fromJson(steps.resolve.outputs.version-c).tag }}
        ref: ${{ fromJson(steps.resolve.outputs.version-c).sha }}
        repository: ${{ env.sdk_repo }}

    - name: checkout version d
      uses: actions/checkout@v4
      if: steps.resolve.outputs.version-d != ''
      with:
        path: ${{ inputs.path }}/${{ inputs.sdk }}/src/${{ fromJson(steps.resolve.outputs.version-d).tag }}
        ref: ${{ fromJson(steps.resolve.outputs.version-d).sha }}
        repository: ${{ env.sdk_repo }}
