name: Build Backend
env:
  KEYCLOAK_BASE_VERSION: 15.0.2
  KEYCLOAK_BASE_IMAGE: opentdf/keycloak-multiarch-base
  KEYCLOAK_OTDF_VERSION: 15.0.2-r1
  CONTAINER_ARCHS: linux/amd64,linux/arm64

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
jobs:
  helm-lint-test:
    runs-on: ubuntu-latest
    container:
      image: quay.io/helmpack/chart-testing:latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Lint
        run: ct lint --target-branch main --all charts/
      - name: Render Templates
        run: |
          cd charts
          for d in */ ; do
              if [ -f "$d/Chart.yaml" ]; then
                echo "Rendering Helm chart $d to validate defaults..."
                helm template "$d"
              fi
          done

  scriptcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 🦪 ✔ 🧼🧼🧼
        run: docker run --rm -v "$PWD:/mnt" --workdir "/mnt" "koalaman/shellcheck:v0.8.0" --color=always scripts/*
      - name: 🦪 ✅ 🦇🦇🦇
        run: docker run --rm -v "$PWD:/mnt" --workdir "/mnt" bats/bats:1.5.0 scripts/*.bats

  unittest:
    runs-on: ubuntu-latest
    needs:
      - scriptcheck
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: "🐍 🧪"
        run: docker run --rm -v "$PWD:/mnt" --workdir "/mnt" "python:3.10" scripts/monotest --coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  integration-test:
    runs-on: ubuntu-latest
    needs:
      - unittest
    steps:
      - uses: actions/checkout@v2
      - uses: yokawasa/action-setup-kube-tools@v0.7.1
        with:
          setup-tools: |
            kubectl
            helm
            tilt
          # This should be in sync with the minikube-deployed kube version below
          kubectl: "1.23.3"
          helm: "3.8.0"
          helmv3: "3.8.0"
          tilt: "0.25.2"
      - run: |
          kustomize version
          tilt version
      - name: Start Minikube
        id: minikube
        uses: medyagh/setup-minikube@latest
        with:
          minikube-version: 1.25.1
          # This should be in sync with the setup-tools version above
          kubernetes-version: 1.23.3
      - name: Get cluster versions
        run: |-
          kubectl version
          kubectl get pods -A
      - name: config ghpr with pat
        run: |-
          cd tests/containers/clients
          echo @opentdf:registry=https://npm.pkg.github.com >.npmrc
          echo //npm.pkg.github.com/:_authToken=${{ secrets.READ_PACKAGES_PAT }} >>.npmrc
      - name: Run integration test Tiltfile
        run: |-
          cd tests/integration
          tilt ci

      - name: Quick check - run/validate local deployment Tiltfile
        run: |-
          tilt ci

  build-base:
    runs-on: ubuntu-latest
    needs:
      - unittest
      - helm-lint-test
      - integration-test
    outputs:
      digest: ${{ steps.publish.outputs.digest }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/python-base
          tags: |
            3.10
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish
        id: publish
        uses: docker/build-push-action@v2
        with:
          build-args: |-
            ALPINE_VERSION=3.15
            CONTAINER_REGISTRY=ghcr.io
            PY_VERSION=3.10
          context: ./containers/python_base
          platforms: ${{ env.CONTAINER_ARCHS }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true

  build-and-publish-isolated:
    needs:
      - build-base
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - kas
          - keycloak-bootstrap
    steps:
      - uses: actions/checkout@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/${{ matrix.repo }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish
        uses: docker/build-push-action@v2
        with:
          build-args: |-
            ALPINE_VERSION=3.15
            CONTAINER_REGISTRY=ghcr.io
            PY_VERSION=3.10
            PYTHON_BASE_IMAGE_SELECTOR=@${{ needs.build-base.outputs.digest }}
          context: ./containers/${{ matrix.repo }}
          platforms: ${{ env.CONTAINER_ARCHS }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-publish-with-shared-base:
    needs:
      - build-base
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - claims
          - attributes
          - entitlements
    steps:
      - uses: actions/checkout@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/${{ matrix.repo }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish
        uses: docker/build-push-action@v2
        with:
          build-args: |-
            ALPINE_VERSION=3.15
            CONTAINER_REGISTRY=ghcr.io
            PY_VERSION=3.10
            PYTHON_BASE_IMAGE_SELECTOR=@${{ needs.build-base.outputs.digest }}
          context: ./containers
          file: ./containers/${{ matrix.repo }}/Dockerfile
          platforms: ${{ env.CONTAINER_ARCHS }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  keycloak-image-base:
    # We're literally building upstream Keycloak as-is
    # and we don't need to rebuild unless there's a major Keycloak version bump
    # so at least skip this for non-main builds
    runs-on: ubuntu-latest
    needs:
      - integration-test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout upstream Keycloak image repo
        uses: actions/checkout@v2
        with:
          repository: 'keycloak/keycloak-containers'
          ref: ${{ env.KEYCLOAK_BASE_VERSION }}
      - name: Set up QEMU (required for crossbuild)
        uses: docker/setup-qemu-action@v1
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/keycloak-multiarch-base
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish upstream Keycloak base image as multi-arch image
        uses: docker/build-push-action@v2
        with:
          context: ./server
          file: ./server/Dockerfile
          platforms: ${{ env.CONTAINER_ARCHS }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ghcr.io/opentdf/keycloak-multiarch-base:${{ env.KEYCLOAK_BASE_VERSION }}

  custom-keycloak-image:
    runs-on: ubuntu-latest
    needs:
      - keycloak-image-base
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/keycloak
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up QEMU (required for crossbuild)
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish
        uses: docker/build-push-action@v2
        with:
          build-args: |-
            MAVEN_VERSION=3.8.4
            JDK_VERSION=11
            CONTAINER_REGISTRY=ghcr.io
            KEYCLOAK_BASE_VERSION=${{ env.KEYCLOAK_BASE_VERSION }}
            KEYCLOAK_BASE_IMAGE=${{ env.KEYCLOAK_BASE_IMAGE }}
          context: ./containers/keycloak-protocol-mapper
          platforms: ${{ env.CONTAINER_ARCHS }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
