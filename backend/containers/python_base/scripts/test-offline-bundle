#!/usr/bin/env bash
#  Validate the current exported offline bundle
#    * Makes sure the last run of build-offline-bundle completed successfully
#    * Makes sure it is up to date (check for git HEAD digest match)
#    * TK Loads images into docker agent
#    * TK Helm installs into a kind cluster and runs KUTTL test

APP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
export PATH="$PATH:$APP_DIR"

monolog TRACE "Running [$0${1+ }$*]"

: "${LOCAL_TOOL:="kind"}"
export LOCAL_TOOL

if [[ $1 ]]; then
  if ! unzip "$1"; then
    monolog ERROR "Unable to unzip bundle [${1}]"
    exit 1
  fi

  if ! cd export; then 
    monolog ERROR "Bundle [${1}] did not create expected folder, [export]"
    exit 1
  fi
else
  # Validating a local run of build-offline-bundle; no need to unzip
  PROJECT_ROOT="$(git rev-parse --show-toplevel)"
  if ! cd "$PROJECT_ROOT/build"; then
    monolog ERROR "Unable to find project root [${PROJECT_ROOT}] from APP_DIR=[${APP_DIR}]"
    exit 1
  fi


  if ! diff export/{BUNDLE_TAG,COMPLETED_TAG}; then
    monolog ERROR "build-offline-bundle did not complete successfully"
    exit 1
  fi
fi

EXPORT_ROOT="$(cd export >/dev/null && pwd)"
CERTS_ROOT="${EXPORT_ROOT}/certs"
CHART_ROOT="${EXPORT_ROOT}/charts"
DEPLOYMENT_DIR="${EXPORT_ROOT}/deployment"
TOOLS_ROOT="${EXPORT_ROOT}/scripts"

export EXPORT_ROOT
export CERTS_ROOT
export CHART_ROOT
export DEPLOYMENT_DIR
export TOOLS_ROOT


suffix="$(<export/BUNDLE_TAG)"
if [[ ! ${suffix} ]]; then
  monolog ERROR "Bundle is missing required label metadata"
  exit 1
fi

monolog TRACE "docker load -i [export/opentdf-service-images-${suffix}.tar]"
if ! docker load -i "export/opentdf-service-images-${suffix}.tar"; then
  monolog ERROR "offline bundle failed to load"
  exit 1
fi


for third in kind postgresql; do
  prefix="export/third-party-image-${third}-${suffix}"
  monolog TRACE "docker load kind from [${prefix}.tar]"
  if ! docker load -i "${prefix}.tar" ; then
    monolog ERROR "offline bundle for [${third}] failed to load"
    exit 1
  fi
  meta=$(<"${prefix}.meta")
  abstag=${meta%% *}
  reponame=${meta%%:*}
  # Tag image with tag we are matching in the pull
  # meta has two values so we want it to split into two parameters
  # shellcheck disable=SC2086
  if ! docker tag $meta; then
    monolog ERROR "3rd party bundle [${third}] failed: [docker tag ${meta}]"
    exit 1
  fi

  # Tag image with `offline`. The percent below strips everything
  # after (and including) the first colon
  if ! docker tag "$abstag" "$reponame:offline"; then
    monolog ERROR "3rd party bundle [${third}] failed to [docker tag $abstag $reponame:offline]"
    exit 1
  fi
done

export SERVICE_IMAGE_TAG="${suffix}"
if ! export/deployment/start.sh --offline; then
  monolog ERROR "offline services failed to install"
  exit 1
fi

# TODO Validate with KUTTL
