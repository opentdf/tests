import { v4 } from 'uuid';
import { put } from 'axios';
import { ZipReader, streamToBuffer, inBrowser, fromBuffer, fromDataSource } from '../utils';
import { base64 } from '../encodings';
import TDF from '../tdf';
import { PlaintextStream } from './tdf-stream';
import { TDFCiphertextStream } from './tdf-cipher-text-stream';
import { AuthProvider, HttpRequest } from './auth';
import OIDCClientCredentialsProvider from'../auth/oidc-clientcredentials-provider';
import OIDCRefreshTokenProvider from '../auth/oidc-refreshtoken-provider';
import OIDCExternalJwtProvider from '../auth/oidc-externaljwt-provider';

import { DEFAULT_SEGMENT_SIZE, DecryptParamsBuilder, EncryptParamsBuilder } from './builders';

const GLOBAL_BYTE_LIMIT = 64 * 1000 * 1000 * 1000; // 64 GB, see WS-9363.
const HTML_BYTE_LIMIT = 100 * 1000 * 1000; // 100 MB, see WS-9476.

// No default config for now. Delegate to Virtru wrapper for endpoints.
const defaultClientConfig = {};

const uploadBinaryToS3 = async function (stream, uploadUrl, fileSize) {
  try {
    if (inBrowser()) {
      /* Buffer the stream in a browser context, stream browser uploads are unsupported
         without a createPresignedPost url or via the aws-sdk using getFederationToken */
      stream = await streamToBuffer(stream);
    }

    const res = await put(uploadUrl, stream, {
      headers: {
        'Content-Length': fileSize,
        'content-type': 'application/zip',
        'cache-control': 'no-store',
      },
      maxContentLength: Infinity,
      maxBodyLength: Infinity,
      body: stream,
    });
    return res.data;
  } catch (e) {
    console.error(e);
    throw e;
  }
};
const getFirstTwoBytes = async (chunker) => new TextDecoder().decode(await chunker(0, 2));

const makeChunkable = async (source) => {
  // dump stream to buffer
  // we don't support streams anyways (see zipreader.js)
  let initialChunker;
  let buf = null;
  if (source.type === 'stream') {
    buf = await streamToBuffer(source.location);
    initialChunker = fromBuffer(buf);
  } else if (source.type === 'buffer') {
    buf = source.location;
    initialChunker = fromBuffer(buf);
  } else {
    initialChunker = await fromDataSource(source);
  }

  const magic = await getFirstTwoBytes(initialChunker);
  // Pull first two bytes from source.
  if (magic === 'PK') {
    return initialChunker;
  }
  // Unwrap if it's html.
  // If NOT zip (html), convert/dump to buffer, unwrap, and continue.
  const htmlBuf = buf || (await initialChunker());
  const zipBuf = TDF.unwrapHtml(htmlBuf);
  return fromBuffer(zipBuf);
};


class Client {
  /**
   * An abstraction for protecting and accessing data using TDF3 services.
   * @param {Object} config - configuration parameters
   * @param {Object} [config.keypair] - keypair generated for signing. Optional, will be generated by sdk if not passed
   * @param {String} [config.organizationName] - OIDC realm name
   * @param {String} [config.clientId]
   * @param {String} [config.kasEndpoint] - Key Access Server url
   * @param {String} [config.clientSecret] - Should be added ONLY for Node build
   * @param {String} [config.oidcRefreshToken] - After logging in to browser OIDC interface user
   * receives fresh token that needed by SDK for auth needs
   * @param {String} [config.externalJwt] - JWT from external authority (eg Google)
   * @param {String} [config.virtruOIDCEndpoint] - Endpoint of authentication service
   */
  constructor(config = {}) {
    const clientConfig = { ...defaultClientConfig, ...config };

    let pubKey = clientConfig.keypair ? clientConfig.keypair.publicKey : null;

    if (!clientConfig.organizationName) {
      throw new Error('Client Organization must be provided to constructor');
    }

    if (!clientConfig.clientId) {
      throw new Error('Client ID must be provided to constructor');
    }

    if (!clientConfig.kasEndpoint) {
      if (!clientConfig.keyRewrapEndpoint) {
        throw new Error('KAS definition not found');
      } else {
        clientConfig.kasEndpoint = clientConfig.keyRewrapEndpoint.replace(/\/rewrap$/, '');
      }
    } else {
      if (!clientConfig.keyRewrapEndpoint) {
        clientConfig.keyRewrapEndpoint = `${clientConfig.kasEndpoint}/v2/rewrap`;
      }
      if (!clientConfig.keyUpsertEndpoint) {
        clientConfig.keyUpsertEndpoint = `${clientConfig.kasEndpoint}/v2/upsert`;
      }
    }

    if(inBrowser()) {
      //If you're in a browser and passing client secrets, you're Doing It Wrong.
      if (clientConfig.clientSecret) {
        throw new Error('Client credentials not supported in a browser context');
      }
      //Are we exchanging a refreshToken for a bearer token (normal AuthCode browser auth flow)?
      //If this is a browser context, we expect the caller to handle the initial
      //browser-based OIDC login and authentication process against the OIDC endpoint using their chosen method,
      //and provide us with a valid refresh token/clientId obtained from that process.
      if (clientConfig.oidcRefreshToken) {
        clientConfig.authProvider = new OIDCRefreshTokenProvider({
          organizationName: clientConfig.organizationName,
          clientPubKey: pubKey,
          clientId: clientConfig.clientId,
          externalRefreshToken: clientConfig.oidcRefreshToken,
          oidcOrigin: clientConfig.virtruOIDCEndpoint,
        });
      } else if (clientConfig.externalJwt) {
        //Are we exchanging a JWT previously issued by a trusted external entity (e.g. Google) for a bearer token?
        clientConfig.authProvider = new OIDCExternalJwtProvider({
          organizationName: clientConfig.organizationName,
          clientPubKey: pubKey,
          clientId: clientConfig.clientId,
          externalJwt: clientConfig.externalJwt,
          oidcOrigin: clientConfig.virtruOIDCEndpoint,
        });
      }
    } else {
      //If you're NOT in a browser and are NOT passing client secrets, you're Doing It Wrong.
      //If this is not a browser context, we expect the caller to supply their client ID and client secret, so that
      // we can authenticate them directly with the OIDC endpoint.
      if (!clientConfig.clientSecret) {
        throw new Error(
          'If using client credentials, must supply both client ID and client secret to constructor'
        );
      }
      clientConfig.authProvider = new OIDCClientCredentialsProvider({
        organizationName: clientConfig.organizationName,
        clientPubKey: pubKey,
        clientId: clientConfig.clientId,
        clientSecret: clientConfig.clientSecret,
        oidcOrigin: clientConfig.virtruOIDCEndpoint,
      });
    }

    this.clientConfig = clientConfig;
  }

  /**
   * Encrypt plaintext into TDF ciphertext. One of the core operations of the Virtru SDK.
   *
   * @param {object} scope - dissem and attributes for constructing the policy
   * @param {object} source - nodeJS source object of unencrypted data
   * @param {boolean} [asHtml] - If we should wrap the TDF data in a self-opening HTML wrapper
   * @param {object} [metadata] - additional non-secret data to store with the TDF
   * @param {object} [opts] - object containing keypair
   * @param {string} [mimeType] - mime type of source
   * @param {boolean} [offline] - Where to store the policy
   * @param {object} [output] - output stream. Created and returned if not passed in
   * @param {object} [rcaSource] - RCA source information
   * @param {function} [validateEntity] - Called on the EO after fetch; return `false` to fail the encrypt, e.g. if the entity has insufficient authN
   * @param {number} [windowSize] - segment size in bytes
   * @return {TDFCiphertextStream} - a {@link https://nodejs.org/api/stream.html#stream_class_stream_readable|Readable} stream containing the TDF ciphertext.
   * @see EncryptParamsBuilder
   */
  async encrypt({
    scope,
    source,
    asHtml = false,
    metadata = {},
    opts = {},
    mimeType = null,
    offline = false,
    output = null,
    rcaSource = null,
    validateEntity = null,
    windowSize = DEFAULT_SEGMENT_SIZE,
  }) {
    if (rcaSource && asHtml) throw new Error('rca links should be used only with zip format');

    const keypair = await this._getOrCreateKeypair(opts);
    const policyObject = await this._createPolicyObject(scope);
    const kasPublicKey = await this._getOrFetchKasPubKey();

    // TODO: Refactor underlying builder to remove some of this unnecessary config.
    const tdf = TDF.create()
      .setPrivateKey(keypair.privateKey)
      .setPublicKey(keypair.publicKey)
      .setEncryption({
        type: 'split',
        cipher: 'aes-256-gcm',
      })
      .addKeyAccess({
        type: offline ? 'wrapped' : 'remote',
        url: this.clientConfig.kasEndpoint,
        publicKey: kasPublicKey,
        metadata: metadata,
      })
      .setDefaultSegmentSize(windowSize)
      // set root sig and segment types
      .setIntegrityAlgorithm('hs256', 'gmac')
      .addContentStream(source, mimeType)
      .setPolicy(policyObject)
      .setAuthProvider(this.clientConfig.authProvider);

    const stream = (!asHtml && output) || new TDFCiphertextStream(windowSize);
    const byteLimit = asHtml ? HTML_BYTE_LIMIT : GLOBAL_BYTE_LIMIT;
    const { upsertResponse, tdfSize } = await tdf.writeStream(stream, byteLimit, rcaSource);
    if (rcaSource) {
      const url = upsertResponse[0][0].storageLinks.payload.upload;
      await uploadBinaryToS3(stream, url, tdfSize);
    }
    if (!asHtml) {
      return stream;
    }

    // Wrap if it's html.
    // FIXME: Support streaming for html format.
    const htmlBuf = TDF.wrapHtml(
      await stream.toBuffer(),
      JSON.stringify(tdf.manifest),
      this.clientConfig.readerUrl
    );
    const htmlStream = output || new TDFCiphertextStream(windowSize);
    htmlStream.push(htmlBuf);
    htmlStream.push(null);
    return htmlStream;
  }

  /**
   * Decrypt TDF ciphertext into plaintext. One of the core operations of the Virtru SDK.
   *
   * @param {object} - Required. All parameters for the decrypt operation, generated using {@link DecryptParamsBuilder#build|DecryptParamsBuilder's build()}.
   * @param {object} source - A data stream object, one of remote, stream, buffer, etc. types.
   * @param {object} opts - object with keypair
   * @param {object} [output] - A node Writeable; if not found will create and return one.
   * @param {object} [rcaSource] - RCA source information
   * @return {PlaintextStream} - a {@link https://nodejs.org/api/stream.html#stream_class_stream_readable|Readable} stream containing the decrypted plaintext.
   * @see DecryptParamsBuilder
   */
  async decrypt({
    source,
    opts= {},
    output = null,
    rcaSource = null,
    contentLength = null,
  }) {
    const keypair = await this._getOrCreateKeypair(opts);
    const tdf = TDF.create()
      .setPrivateKey(keypair.privateKey)
      .setPublicKey(keypair.publicKey)
      .setAuthProvider(this.clientConfig.authProvider);
    const chunker = await makeChunkable(source);
    const out = output || new PlaintextStream();

    if (contentLength) {
      out.contentLength = contentLength;
    }

    // Await in order to catch any errors from this call.
    // TODO: Write error event to stream and don't await.
    await tdf.readStream(chunker, out, rcaSource);

    return out;
  }

  /**
   * Get the unique policyId associated with TDF ciphertext. Useful for managing authorization policies of encrypted data.
   * <br/><br/>
   * The policyId is embedded in the ciphertext so this is a local operation.
   *
   * @param {object} source - Required. TDF data stream,
   * generated using {@link DecryptParamsBuilder#build|DecryptParamsBuilder's build()}.
   * @return {string} - the unique policyId, which can be used for tracking purposes or policy management operations.
   * @see DecryptParamsBuilder
   */
  async getPolicyId({ source }) {
    const chunker = await makeChunkable(source);
    const zipHelper = new ZipReader(chunker);
    const centralDirectory = await zipHelper.getCentralDirectory();
    const manifest = await zipHelper.getManifest(centralDirectory, '0.manifest.json');
    const policyJson = base64.decode(manifest.encryptionInformation.policy);
    return JSON.parse(policyJson).uuid;
  }

  /*
   * Create a policy object for an encrypt operation.
   */
  async _createPolicyObject(scope) {
    if (scope.policyObject) {
      // use the client override if provided
      return scope.policyObject;
    }
    const policyId = scope.policyId || v4();
    return {
      uuid: policyId,
      body: {
        dataAttributes: scope.attributes,
        dissem: scope.dissem,
      },
    };
  }

  /*
   * Extract a keypair provided as part of the options dict.
   * Default to using the clientwide keypair, generating one if necessary.
   *
   * Additionally, update the auth injector with the (potentially new) pubkey
   */
  async _getOrCreateKeypair(opts) {
    //If clientconfig has keypair, assume auth provider was already set up with pubkey and bail
    if (this.clientConfig.keypair) {
      return this.clientConfig.keypair;
    }

    //If a keypair is being dynamically provided, then we've gotta (re)register
    // the pubkey with the auth provider
    let keypair = {};
    if (opts.keypair && opts.keypair.publicKey && opts.keypair.privateKey) {
      keypair = opts.keypair;
    } else {
      //We have to generate and store a new keypair
      keypair = await TDF.generateKeyPair();
      this.clientConfig.keypair = keypair;
    }

    //This will contact the auth server and forcibly refresh the auth token claims,
    // binding the token and the (new) pubkey together.
    // Note that we base64 encode the PEM string here as a quick workaround, simply because
    // a formatted raw PEM string isn't a valid header value and sending it raw makes keycloak's
    // header parser barf. There are more subtle ways to solve this, but this works for now.

    await this.clientConfig.authProvider.setClientPubkey(base64.encode(keypair.publicKey));
    return keypair;
  }

  /*
   * If we have KAS url but not public key we can fetch it from KAS
   */
  async _getOrFetchKasPubKey() {
    //If clientconfig has keypair, assume auth provider was already set up with pubkey and bail
    if (this.clientConfig.kasPublicKey) {
      return this.clientConfig.kasPublicKey;
    }

    if (this.clientConfig.kasEndpoint) {
      try {
        this.clientConfig.kasPublicKey = await TDF.getPublicKeyFromKeyAccessServer(this.clientConfig.kasEndpoint);
      } catch(e) {
        console.error('Retrieving KAS public key has failed');
        throw new Error(e.message);
      }

      return this.clientConfig.kasPublicKey;
    }

    throw new Error('KAS definition not found');
  }
}

export default {
  AuthProvider,
  Client,
  DecryptParamsBuilder,
  EncryptParamsBuilder,
  HttpRequest,
};
